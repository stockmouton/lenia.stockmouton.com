{
  "address": "0x19DE8eECe41816e9be6484B08a223A832121f8f4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "payees",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "shares_",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "PayeeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PaymentReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PaymentReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_SUPPLY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        }
      ],
      "name": "addPresaleList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_number",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "claimReserved",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEngine",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getLeniaParams",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "m",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "s",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "cells",
              "type": "bytes"
            }
          ],
          "internalType": "struct LeniaDescriptor.LeniaParams",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getMetadata",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "metadataReady",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "stringID",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "imageURL",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "animationURL",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "uint16",
                  "name": "traitType",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "value",
                  "type": "uint16"
                },
                {
                  "internalType": "string",
                  "name": "numericalValue",
                  "type": "string"
                }
              ],
              "internalType": "struct LeniaDescriptor.LeniaAttribute[]",
              "name": "leniaAttributes",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct LeniaDescriptor.LeniaMetadata",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReservedLeft",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isEligibleForPresale",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPresaleActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isSaleActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "cellsInput",
          "type": "bytes"
        }
      ],
      "name": "logEngine",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "m",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "s",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "cellsInput",
          "type": "bytes"
        }
      ],
      "name": "logLeniaParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "payee",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "presaleMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "release",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "released",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "engineInput",
          "type": "bytes"
        }
      ],
      "name": "setEngine",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "m",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "s",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "cellsInput",
          "type": "bytes"
        }
      ],
      "name": "setLeniaParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "stringID",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "imageURL",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "animationURL",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "traitType",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "value",
              "type": "uint16"
            },
            {
              "internalType": "string",
              "name": "numericalValue",
              "type": "string"
            }
          ],
          "internalType": "struct LeniaDescriptor.LeniaAttribute[]",
          "name": "attributes",
          "type": "tuple[]"
        }
      ],
      "name": "setMetadata",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "shares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "togglePresaleStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleSaleStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "tokensOfOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalReleased",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xd3c21396c761a018769a66dfb144dac20f560dab0c5ffd2776bfc4a754765e8c",
  "receipt": {
    "to": null,
    "from": "0xdD11751cdD3f6EFf01B1f6151B640685bfa5dB4a",
    "contractAddress": "0x19DE8eECe41816e9be6484B08a223A832121f8f4",
    "transactionIndex": 23,
    "gasUsed": "4116621",
    "logsBloom": "0x
    "blockHash": "0xb4b36fb2094809f81fed972a80302b9da844668517a4b856741fafa561a5eca1",
    "transactionHash": "0xd3c21396c761a018769a66dfb144dac20f560dab0c5ffd2776bfc4a754765e8c",
    "logs": [
      {
        "transactionIndex": 23,
        "blockNumber": 9421799,
        "transactionHash": "0xd3c21396c761a018769a66dfb144dac20f560dab0c5ffd2776bfc4a754765e8c",
        "address": "0x19DE8eECe41816e9be6484B08a223A832121f8f4",
        "topics": [
          "0x40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac"
        ],
        "data": "0x000000000000000000000000dd11751cdd3f6eff01b1f6151b640685bfa5db4a0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 44,
        "blockHash": "0xb4b36fb2094809f81fed972a80302b9da844668517a4b856741fafa561a5eca1"
      },
      {
        "transactionIndex": 23,
        "blockNumber": 9421799,
        "transactionHash": "0xd3c21396c761a018769a66dfb144dac20f560dab0c5ffd2776bfc4a754765e8c",
        "address": "0x19DE8eECe41816e9be6484B08a223A832121f8f4",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dd11751cdd3f6eff01b1f6151b640685bfa5db4a"
        ],
        "data": "0x",
        "logIndex": 45,
        "blockHash": "0xb4b36fb2094809f81fed972a80302b9da844668517a4b856741fafa561a5eca1"
      }
    ],
    "blockNumber": 9421799,
    "cumulativeGasUsed": "8039087",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0xdD11751cdD3f6EFf01B1f6151B640685bfa5dB4a"
    ],
    [
      1
    ]
  ],
  "solcInputHash": "80103e19cbe484c3d8835fae9da51309",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"payees\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"PayeeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"addPresaleList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"claimReserved\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEngine\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getLeniaParams\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"m\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"s\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"cells\",\"type\":\"bytes\"}],\"internalType\":\"struct LeniaDescriptor.LeniaParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"metadataReady\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"stringID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageURL\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animationURL\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"traitType\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"value\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"numericalValue\",\"type\":\"string\"}],\"internalType\":\"struct LeniaDescriptor.LeniaAttribute[]\",\"name\":\"leniaAttributes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct LeniaDescriptor.LeniaMetadata\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReservedLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isEligibleForPresale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPresaleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSaleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"cellsInput\",\"type\":\"bytes\"}],\"name\":\"logEngine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"m\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"s\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"cellsInput\",\"type\":\"bytes\"}],\"name\":\"logLeniaParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"payee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"engineInput\",\"type\":\"bytes\"}],\"name\":\"setEngine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"m\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"s\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"cellsInput\",\"type\":\"bytes\"}],\"name\":\"setLeniaParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"stringID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageURL\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animationURL\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"traitType\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"value\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"numericalValue\",\"type\":\"string\"}],\"internalType\":\"struct LeniaDescriptor.LeniaAttribute[]\",\"name\":\"attributes\",\"type\":\"tuple[]\"}],\"name\":\"setMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePresaleStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleSaleStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"payee(uint256)\":{\"details\":\"Getter for the address of the payee number `index`.\"},\"release(address)\":{\"details\":\"Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the total shares and their previous withdrawals.\"},\"released(address)\":{\"details\":\"Getter for the amount of Ether already released to a payee.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"shares(address)\":{\"details\":\"Getter for the amount of shares held by an account.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalReleased()\":{\"details\":\"Getter for the total amount of Ether already released.\"},\"totalShares()\":{\"details\":\"Getter for the total shares held by payees.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lenia.sol\":\"Lenia\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/finance/PaymentSplitter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/math/SafeMath.sol\\\";\\n\\n/**\\n * @title PaymentSplitter\\n * @dev This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware\\n * that the Ether will be split in this way, since it is handled transparently by the contract.\\n *\\n * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\\n * account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim\\n * an amount proportional to the percentage of total shares they were assigned.\\n *\\n * `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\\n * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\\n * function.\\n */\\ncontract PaymentSplitter is Context {\\n    event PayeeAdded(address account, uint256 shares);\\n    event PaymentReleased(address to, uint256 amount);\\n    event PaymentReceived(address from, uint256 amount);\\n\\n    uint256 private _totalShares;\\n    uint256 private _totalReleased;\\n\\n    mapping(address => uint256) private _shares;\\n    mapping(address => uint256) private _released;\\n    address[] private _payees;\\n\\n    /**\\n     * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at\\n     * the matching position in the `shares` array.\\n     *\\n     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\\n     * duplicates in `payees`.\\n     */\\n    constructor(address[] memory payees, uint256[] memory shares_) payable {\\n        require(payees.length == shares_.length, \\\"PaymentSplitter: payees and shares length mismatch\\\");\\n        require(payees.length > 0, \\\"PaymentSplitter: no payees\\\");\\n\\n        for (uint256 i = 0; i < payees.length; i++) {\\n            _addPayee(payees[i], shares_[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\\n     * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the\\n     * reliability of the events, and not the actual splitting of Ether.\\n     *\\n     * To learn more about this see the Solidity documentation for\\n     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\\n     * functions].\\n     */\\n    receive() external payable virtual {\\n        emit PaymentReceived(_msgSender(), msg.value);\\n    }\\n\\n    /**\\n     * @dev Getter for the total shares held by payees.\\n     */\\n    function totalShares() public view returns (uint256) {\\n        return _totalShares;\\n    }\\n\\n    /**\\n     * @dev Getter for the total amount of Ether already released.\\n     */\\n    function totalReleased() public view returns (uint256) {\\n        return _totalReleased;\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of shares held by an account.\\n     */\\n    function shares(address account) public view returns (uint256) {\\n        return _shares[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of Ether already released to a payee.\\n     */\\n    function released(address account) public view returns (uint256) {\\n        return _released[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the address of the payee number `index`.\\n     */\\n    function payee(uint256 index) public view returns (address) {\\n        return _payees[index];\\n    }\\n\\n    /**\\n     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\\n     * total shares and their previous withdrawals.\\n     */\\n    function release(address payable account) public virtual {\\n        require(_shares[account] > 0, \\\"PaymentSplitter: account has no shares\\\");\\n\\n        uint256 totalReceived = address(this).balance + _totalReleased;\\n        uint256 payment = (totalReceived * _shares[account]) / _totalShares - _released[account];\\n\\n        require(payment != 0, \\\"PaymentSplitter: account is not due payment\\\");\\n\\n        _released[account] = _released[account] + payment;\\n        _totalReleased = _totalReleased + payment;\\n\\n        Address.sendValue(account, payment);\\n        emit PaymentReleased(account, payment);\\n    }\\n\\n    /**\\n     * @dev Add a new payee to the contract.\\n     * @param account The address of the payee to add.\\n     * @param shares_ The number of shares owned by the payee.\\n     */\\n    function _addPayee(address account, uint256 shares_) private {\\n        require(account != address(0), \\\"PaymentSplitter: account is the zero address\\\");\\n        require(shares_ > 0, \\\"PaymentSplitter: shares are 0\\\");\\n        require(_shares[account] == 0, \\\"PaymentSplitter: account already has shares\\\");\\n\\n        _payees.push(account);\\n        _shares[account] = shares_;\\n        _totalShares = _totalShares + shares_;\\n        emit PayeeAdded(account, shares_);\\n    }\\n}\\n\",\"keccak256\":\"0x5b5c64239a7980f0c2c5baa584a3350912c7260db32f6d6544a2755f59a0c488\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x41dc7bf7f69c668eb98aa078c5140a4d3c3b097124ee4b6058a649ca99688300\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/Lenia.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// @title Main contract for the Lenia collection\\n\\n/**********************************************\\n *                        .                   *\\n *                          ,,                *\\n *                      ......*#*             *\\n *                 .......    ..*%%,          *\\n *          .,,****,..             ,#(.       *\\n *         .,**((((*,.               .*(.     *\\n *          .**((**,,,,,,,             .*,    *\\n *        .......,,**(((((((*.          .,,   *\\n *       ...      ,*((##%&&&&@&(,        .,.  *\\n *       ..        ,((#&&@@@@@@@@&(*.  ..,,.  *\\n *    ,. ..          ,#&@@@@@@@@@@@%#(*,,,,.  *\\n *      ((,.           *%@@@@&%%%&&%#(((*,,.  *\\n *        (&*            *%@@@&&%%##(((**,.   *\\n *          (&(           .*(#%%##(((**,,.    *\\n *            .((,         .,*(((((**,..      *\\n *               .,*,,.....,,,,*,,,..         *\\n *                    ..........              *\\n**********************************************/\\n\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/finance/PaymentSplitter.sol\\\";\\n\\nimport { LeniaDescriptor } from \\\"./libs/LeniaDescriptor.sol\\\";\\n\\ncontract Lenia is ERC721, ERC721Enumerable, PaymentSplitter, Ownable {\\n\\n    uint256 public constant MAX_SUPPLY = 202;\\n    uint256 private _price = 0.15 ether;\\n    uint256 private _reserved = 11;\\n\\n    mapping(address => bool) private _presaleList;\\n    bool private _isPresaleActive = false;\\n    bool private _isSaleActive = false;\\n    \\n    string private __baseURI;\\n\\n    // Lenia on chain\\n    bytes private engine;\\n    LeniaDescriptor.LeniaParams[MAX_SUPPLY] private leniaParams;\\n\\n    // Metadata on chain?\\n    LeniaDescriptor.LeniaMetadata[MAX_SUPPLY] private metadata;\\n\\n    constructor(address[] memory payees, uint256[] memory shares_) ERC721(\\\"Lenia\\\", \\\"LENIA\\\") PaymentSplitter(payees, shares_) {\\n    }\\n\\n    function logEngine(bytes calldata cellsInput) external onlyOwner {}\\n\\n    function setEngine(bytes calldata engineInput) public onlyOwner {\\n        engine = engineInput;\\n    }\\n\\n    function getEngine() public view returns(bytes memory) {\\n        return engine;\\n    }\\n\\n    function logLeniaParams(\\n        string calldata m,\\n        string calldata s,\\n        bytes calldata cellsInput\\n    ) external onlyOwner {}\\n\\n    function setLeniaParams(\\n        uint256 id,\\n        string memory m,\\n        string memory s,\\n        bytes memory cellsInput\\n    )\\n        public\\n        onlyOwner\\n    {\\n        LeniaDescriptor.LeniaParams storage params = leniaParams[id];\\n        params.m = m;\\n        params.s = s;\\n        params.cells = cellsInput;\\n    }\\n\\n    function getLeniaParams(uint256 id) public view onlyOwner returns(LeniaDescriptor.LeniaParams memory) {\\n        require(id < MAX_SUPPLY, \\\"id out of bounds\\\");\\n\\n        return leniaParams[id];\\n    }\\n\\n    function setMetadata(\\n        uint256 id,\\n        string memory stringID,\\n        string memory imageURL,\\n        string memory animationURL,\\n        LeniaDescriptor.LeniaAttribute[] memory attributes\\n    )\\n        public\\n        onlyOwner\\n    {\\n        LeniaDescriptor.LeniaMetadata storage params = metadata[id];\\n        params.stringID = stringID;\\n        params.imageURL = imageURL;\\n        params.animationURL = animationURL;\\n        uint256 attrLengths = params.leniaAttributes.length;\\n        for (uint256 i = 0; i < attributes.length; i++) {\\n            if (i >= attrLengths) {\\n                params.leniaAttributes.push();\\n            }\\n            LeniaDescriptor.LeniaAttribute storage storageAttr = params.leniaAttributes[i];\\n\\n            LeniaDescriptor.LeniaAttribute memory currentAttr = attributes[i];\\n            storageAttr.value = currentAttr.value;\\n            storageAttr.numericalValue = currentAttr.numericalValue;\\n            storageAttr.traitType = currentAttr.traitType;\\n        }\\n\\n        params.metadataReady = true;\\n    }\\n\\n    function getMetadata(uint256 id) public view onlyOwner returns(LeniaDescriptor.LeniaMetadata memory) {\\n        require(id < MAX_SUPPLY, \\\"id out of bounds\\\");\\n\\n        return metadata[id];\\n    }\\n    \\n    function tokenURI(uint256 tokenId) public view virtual override(ERC721) returns (string memory) {\\n        require(tokenId < MAX_SUPPLY, \\\"id out of bounds\\\");\\n\\n        LeniaDescriptor.LeniaParams storage currentLeniaParams = leniaParams[tokenId];\\n        LeniaDescriptor.LeniaMetadata storage currentMetadata = metadata[tokenId];\\n        \\n        if (LeniaDescriptor.isReady(currentMetadata, currentLeniaParams)) {\\n            return LeniaDescriptor.constructTokenURI(currentMetadata, currentLeniaParams);\\n        } else {\\n            string memory tokenURIstr = super.tokenURI(tokenId);\\n\\n            return bytes(tokenURIstr).length > 0 ? string(abi.encodePacked(tokenURIstr, \\\".json\\\")) : \\\"\\\";\\n        }\\n    }\\n\\n    function isPresaleActive() public view returns(bool) {\\n        return _isPresaleActive;\\n    }\\n\\n    function togglePresaleStatus() external onlyOwner {\\n        _isPresaleActive = !_isPresaleActive;\\n    }\\n\\n    function addPresaleList(\\n        address[] calldata addresses\\n    ) external onlyOwner {\\n        for (uint8 i = 0; i < addresses.length; i++) {\\n            _presaleList[addresses[i]] = true;\\n        }\\n    }\\n\\n    function isEligibleForPresale(address account) public view returns(bool) {\\n        return _presaleList[account];\\n    }\\n\\n    function presaleMint() external payable {\\n        require(_isPresaleActive, \\\"Presale is not active\\\");\\n\\n        bool isSenderEligible = _presaleList[msg.sender];\\n\\n        require(isSenderEligible == true, \\\"Not eligible for the presale\\\");\\n        uint256 supply = totalSupply();\\n        require(supply < MAX_SUPPLY - _reserved, \\\"Tokens are sold out\\\");\\n        require(_price <= msg.value, \\\"Insufficient funds\\\");\\n\\n        _safeMint(msg.sender, supply);\\n        _presaleList[msg.sender] = false;\\n    }\\n\\n    function isSaleActive() public view returns(bool) {\\n        return _isSaleActive;\\n    }\\n\\n    function toggleSaleStatus() external onlyOwner {\\n        _isSaleActive = !_isSaleActive;\\n    }\\n\\n    function mint() external payable {\\n        require(_isSaleActive, \\\"Public sale is not active\\\");\\n        uint256 supply = totalSupply();\\n        require(supply < MAX_SUPPLY - _reserved, \\\"Tokens are sold out\\\");\\n        require( _price <= msg.value, \\\"Insufficient funds\\\");\\n\\n        _safeMint(msg.sender, supply);\\n    }\\n\\n    function setBaseURI(string memory uri) external onlyOwner {\\n        __baseURI = uri;\\n    }\\n\\n    function _baseURI() internal view override(ERC721) returns(string memory) {\\n        return __baseURI;\\n    }\\n\\n    function getPrice() public view returns (uint256) {\\n        return _price;\\n    }\\n\\n    function getReservedLeft() public view returns (uint256) {\\n        return _reserved;\\n    }\\n\\n    function tokensOfOwner(address _owner) public view returns(uint256[] memory) {\\n        uint256 tokenCount = balanceOf(_owner);\\n\\n        uint256[] memory tokensId = new uint256[](tokenCount);\\n        for(uint256 i; i < tokenCount; i++){\\n            tokensId[i] = tokenOfOwnerByIndex(_owner, i);\\n        }\\n        return tokensId;\\n    }\\n\\n    function claimReserved(uint256 _number, address _receiver) external onlyOwner {\\n        require(_number <= _reserved, \\\"Exceeds the max reserved\\\");\\n\\n        uint256 _tokenId = totalSupply();\\n        for (uint256 i; i < _number; i++) {\\n            _safeMint(_receiver, _tokenId + i);\\n        }\\n\\n        _reserved = _reserved - _number;\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId)\\n        internal\\n        override(ERC721, ERC721Enumerable)\\n    {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC721, ERC721Enumerable)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    function release(address payable account) public virtual override(PaymentSplitter) {\\n        super.release(account);\\n    }\\n}\",\"keccak256\":\"0x72cc91f7683caad1fcdffd6c9dae9317d2b06d61852f808490c34b06be4535eb\",\"license\":\"MIT\"},\"contracts/libs/LeniaDescriptor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// @title The library to get the Lenia metadata\\n\\n/**********************************************\\n *                        .                   *\\n *                          ,,                *\\n *                      ......*#*             *\\n *                 .......    ..*%%,          *\\n *          .,,****,..             ,#(.       *\\n *         .,**((((*,.               .*(.     *\\n *          .**((**,,,,,,,             .*,    *\\n *        .......,,**(((((((*.          .,,   *\\n *       ...      ,*((##%&&&&@&(,        .,.  *\\n *       ..        ,((#&&@@@@@@@@&(*.  ..,,.  *\\n *    ,. ..          ,#&@@@@@@@@@@@%#(*,,,,.  *\\n *      ((,.           *%@@@@&%%%&&%#(((*,,.  *\\n *        (&*            *%@@@&&%%##(((**,.   *\\n *          (&(           .*(#%%##(((**,,.    *\\n *            .((,         .,*(((((**,..      *\\n *               .,*,,.....,,,,*,,,..         *\\n *                    ..........              *\\n**********************************************/\\n\\npragma solidity ^0.8.6;\\n\\nlibrary LeniaDescriptor {\\n    string public constant NAME_PREFIX = \\\"Lenia #\\\";\\n    string public constant DESCRIPTION = \\\"A beautiful lifeform creature known as Lenia.\\\";\\n    string public constant EXTERNAL_LINK = \\\"https://lenia.world\\\";\\n\\n    struct LeniaAttribute {\\n        uint16 traitType;\\n        uint16 value;\\n        string numericalValue;\\n    }\\n\\n    struct LeniaParams {\\n        string m;\\n        string s;\\n        bytes cells;\\n    }\\n\\n    struct LeniaMetadata {\\n        bool metadataReady;\\n        string stringID;\\n        string imageURL;\\n        string animationURL;\\n        LeniaAttribute[] leniaAttributes;\\n    }\\n\\n    /**\\n     * @notice Construct an ERC721 token URI.\\n     */\\n    function constructTokenURI(LeniaMetadata memory metadata, LeniaParams memory leniaParams)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        bytes memory nameField = abi.encodePacked(\\n            '\\\"name\\\":\\\"', NAME_PREFIX, metadata.stringID, '\\\"'\\n        );\\n        bytes memory descField = abi.encodePacked(\\n            '\\\"description\\\":\\\"', DESCRIPTION, '\\\"'\\n        );\\n        bytes memory extLinkField = abi.encodePacked(\\n            '\\\"external_link\\\":\\\"', EXTERNAL_LINK, '\\\"'\\n        );\\n        bytes memory imgField = abi.encodePacked(\\n            '\\\"image\\\":\\\"', metadata.imageURL, '\\\"'\\n        );\\n        bytes memory animationField = abi.encodePacked(\\n            '\\\"animation_url\\\":\\\"', metadata.animationURL, '\\\"'\\n        );\\n        bytes memory attrField = abi.encodePacked(\\n            '\\\"attributes\\\":', getAttributesJSON(metadata)\\n        );\\n        bytes memory configField = abi.encodePacked(\\n            '\\\"config\\\": ', getConfigJSON(leniaParams)\\n        );\\n\\n        // prettier-ignore\\n        return string(\\n            abi.encodePacked(\\n                \\\"data:application/json,\\\",\\n                abi.encodePacked(\\n                    \\\"{\\\",\\n                        nameField, \\\",\\\",\\n                        descField, \\\",\\\",\\n                        extLinkField, \\\",\\\",\\n                        imgField, \\\",\\\",\\n                        animationField, \\\",\\\",\\n                        attrField, \\\",\\\",\\n                        configField,\\n                    \\\"}\\\"\\n                )\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice Get the Lenia attributes\\n     */\\n    function getAttributesJSON(LeniaMetadata memory metadata)\\n        private\\n        pure\\n        returns (string memory json)\\n    {\\n        string memory output = \\\"[\\\";\\n        for (uint256 index = 0; index < metadata.leniaAttributes.length; index++) {\\n            if (bytes(output).length == 1) {\\n                output = string(abi.encodePacked(\\n                    output,\\n                    getAttributeJSON(metadata.leniaAttributes[index])\\n                ));\\n            } else {\\n                output = string(abi.encodePacked(\\n                    output, \\\",\\\",\\n                    getAttributeJSON(metadata.leniaAttributes[index])\\n                ));\\n            }\\n\\n        }\\n        string memory v;\\n        if (metadata.leniaAttributes.length > 0){\\n            v = ',';\\n        } else {\\n            v = '';\\n        }\\n        output = string(abi.encodePacked(\\n            output,\\n            v,\\n            '{\\\"value\\\": \\\"oui\\\", \\\"trait_type\\\":\\\"On Chain\\\"}',\\n            \\\"]\\\"\\n        ));\\n\\n        return output;\\n    }\\n\\n    /**\\n     * @notice Get one Lenia attribute\\n     */\\n    function getAttributeJSON(LeniaAttribute memory attr)\\n        private\\n        pure\\n        returns (string memory json)\\n    {\\n        string memory currentTraitType = getTraitType(attr.traitType);\\n        bytes32 currentTraitTypeHash = keccak256(bytes(currentTraitType));\\n        string memory currentValue;\\n        if (currentTraitTypeHash == keccak256(bytes(\\\"Colormap\\\"))) {\\n            currentValue = getColormap(attr.value);\\n        } else if (currentTraitTypeHash == keccak256(bytes(\\\"Family\\\"))) {\\n            currentValue = getFamily(attr.value);\\n        } else if (currentTraitTypeHash == keccak256(bytes(\\\"Ki\\\"))) {\\n            currentValue = getKi(attr.value);\\n        } else if (currentTraitTypeHash == keccak256(bytes(\\\"Aura\\\"))) {\\n            currentValue = getAura(attr.value);\\n        } else if (currentTraitTypeHash == keccak256(bytes(\\\"Weight\\\"))) {\\n            currentValue = getWeight(attr.value);\\n        } else if (currentTraitTypeHash == keccak256(bytes(\\\"Robustness\\\"))) {\\n            currentValue = getRobustness(attr.value);\\n        } else if (currentTraitTypeHash == keccak256(bytes(\\\"Avoidance\\\"))) {\\n            currentValue = getAvoidance(attr.value);\\n        } else if (currentTraitTypeHash == keccak256(bytes(\\\"Velocity\\\"))) {\\n            currentValue = getVelocity(attr.value);\\n        } else if (currentTraitTypeHash == keccak256(bytes(\\\"Spread\\\"))) {\\n            currentValue = getSpread(attr.value);\\n        }\\n        return string(abi.encodePacked(\\n            \\\"{\\\",\\n                '\\\"value\\\":\\\"', currentValue, '\\\",',\\n                '\\\"trait_type\\\":\\\"', currentTraitType, '\\\",',\\n                '\\\"numerical_value\\\":', attr.numericalValue,\\n            \\\"}\\\"\\n        ));\\n    }\\n\\n    /**\\n     * @notice Get the trait type\\n     */\\n    function getTraitType(uint16 index)\\n        private\\n        pure\\n        returns (string memory)\\n    {\\n        string[9] memory traitTypes = [\\n            \\\"Colormap\\\", \\\"Family\\\", \\\"Ki\\\", \\\"Aura\\\", \\\"Weight\\\", \\\"Robustness\\\", \\\"Avoidance\\\", \\\"Velocity\\\", \\\"Spread\\\"\\n        ];\\n\\n        return traitTypes[index];\\n    }\\n\\n    /**\\n     * @notice Get the colormap type\\n     */\\n     function getColormap(uint16 index)\\n        private\\n        pure\\n        returns (string memory)\\n    {\\n        string[10] memory colormaps = [\\n            \\\"Black White\\\", \\\"Carmine Blue\\\", \\\"Carmine Green\\\", \\\"Cinnamon\\\", \\\"Golden\\\", \\\"Msdos\\\", \\\"Rainbow\\\", \\\"Rainbow_transparent\\\", \\\"Salvia\\\", \\\"White Black\\\"\\n        ];\\n\\n        return colormaps[index];\\n    }\\n\\n    /**\\n     * @notice Get the family\\n     */\\n    function getFamily(uint16 index)\\n        private\\n        pure\\n        returns (string memory)\\n    {\\n        string[12] memory families = [\\n            \\\"Genesis\\\", \\\"Aquarium\\\", \\\"Terrarium\\\", \\\"Aerium\\\", \\\"Ignis\\\", \\\"Maelstrom\\\", \\\"Amphibium\\\", \\\"Pulsium\\\", \\\"Etherium\\\", \\\"Nexus\\\", \\\"Oscillium\\\", \\\"Kaleidium\\\"\\n        ];\\n\\n        return families[index];\\n    }\\n\\n    /**\\n     * @notice Get the ki\\n     */\\n    function getKi(uint16 index)\\n        private\\n        pure\\n        returns (string memory)\\n    {\\n        string[4] memory kis = [\\n            \\\"Kiai\\\", \\\"Kiroku\\\", \\\"Kihaku\\\", \\\"Hibiki\\\"\\n        ];\\n\\n        return kis[index];\\n    }\\n\\n    /**\\n     * @notice Get the aura\\n     */\\n    function getAura(uint16 index)\\n        private\\n        pure\\n        returns (string memory)\\n    {\\n        string[5] memory auras = [\\n            \\\"Etheric\\\", \\\"Mental\\\", \\\"Astral\\\", \\\"Celestial\\\", \\\"Spiritual\\\"\\n        ];\\n\\n        return auras[index];\\n    }\\n\\n    /**\\n     * @notice Get the weight\\n     */\\n    function getWeight(uint16 index)\\n        private\\n        pure\\n        returns (string memory)\\n    {\\n        string[5] memory weights = [\\n            \\\"Fly\\\", \\\"Feather\\\", \\\"Welter\\\", \\\"Cruiser\\\", \\\"Heavy\\\"\\n        ];\\n\\n        return weights[index];\\n    }\\n\\n    /**\\n     * @notice Get the robustness\\n     */\\n    function getRobustness(uint16 index)\\n        private\\n        pure\\n        returns (string memory)\\n    {\\n        string[5] memory robustnesss = [\\n            \\\"Aluminium\\\", \\\"Iron\\\", \\\"Steel\\\", \\\"Tungsten\\\", \\\"Vibranium\\\"\\n        ];\\n\\n        return robustnesss[index];\\n    }\\n\\n    /**\\n     * @notice Get the avoidance\\n     */\\n    function getAvoidance(uint16 index)\\n        private\\n        pure\\n        returns (string memory)\\n    {\\n        string[5] memory avoidances = [\\n            \\\"Kawarimi\\\", \\\"Shunshin\\\", \\\"Raiton\\\", \\\"Hiraishin\\\", \\\"Kamui\\\"\\n        ];\\n\\n        return avoidances[index];\\n    }\\n\\n    /**\\n     * @notice Get the velocity\\n     */\\n    function getVelocity(uint16 index)\\n        private\\n        pure\\n        returns (string memory)\\n    {\\n        string[5] memory velocitys = [\\n            \\\"Immovable\\\", \\\"Unrushed\\\", \\\"Swift\\\", \\\"Turbo\\\", \\\"Flash\\\"\\n        ];\\n\\n        return velocitys[index];\\n    }\\n\\n    /**\\n     * @notice Get the spread\\n     */\\n    function getSpread(uint16 index)\\n        private\\n        pure\\n        returns (string memory)\\n    {\\n        string[5] memory spreads = [\\n            \\\"Demie\\\", \\\"Standard\\\", \\\"Magnum\\\", \\\"Jeroboam\\\", \\\"Balthazar\\\"\\n        ];\\n\\n        return spreads[index];\\n    }\\n\\n    /**\\n     * @notice Get the Lenia configuration\\n     */\\n    function getConfigJSON(LeniaParams memory leniaParams)\\n        private\\n        pure\\n        returns (string memory json)\\n    {\\n        // We can't return cells here because cells are raw bytes which can't be easily converted to utf8 string\\n        return string(abi.encodePacked(\\n            \\\"{\\\",\\n                '\\\"kernels_params\\\":', getKernelParamsJSON(leniaParams), ',',\\n                '\\\"world_params\\\":', getWorldParamsJSON(),\\n            \\\"}\\\"\\n        ));\\n    }\\n\\n    /**\\n     * @notice Get the Lenia world_params\\n     */\\n    function getWorldParamsJSON()\\n        private\\n        pure\\n        returns (string memory json)\\n    {\\n        return '{\\\"R\\\": 13, \\\"T\\\": 10, \\\"nb_channels\\\": 1, \\\"nb_dims\\\": 2, \\\"scale\\\": 1}';\\n    }\\n\\n    /**\\n     * @notice Get the Lenia kernels_metadata\\n     */\\n    function getKernelParamsJSON(LeniaParams memory leniaParams)\\n        private\\n        pure\\n        returns (string memory json)\\n    {\\n        return string(abi.encodePacked(\\n            \\\"[\\\",\\n                '{\\\"b\\\": \\\"1\\\", \\\"c_in\\\": 0, \\\"c_out\\\": 0, \\\"gf_id\\\": 0, \\\"h\\\": 1, \\\"k_id\\\": 0,',\\n                '\\\"m\\\": ', leniaParams.m, ',',\\n                '\\\"q\\\": 4, \\\"r\\\": 1,',\\n                '\\\"s\\\": ', leniaParams.s, '}',\\n            \\\"]\\\"\\n        ));\\n    }\\n\\n    function isReady(LeniaMetadata memory metadata, LeniaParams memory leniaParams)\\n        public\\n        pure\\n        returns (bool)\\n    {\\n        bool paramsReady = leniaParams.cells.length != 0 && bytes(leniaParams.m).length != 0 && bytes(leniaParams.s).length != 0;\\n\\n        return metadata.metadataReady && paramsReady;\\n    }\\n}\\n\",\"keccak256\":\"0xda2dc819d6ec7e92910971599a16b6a1ae256274e2bb8c2737c9ee7671f26c0f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052670214e8348c4f0000601055600b6011556013805461ffff191690553480156200002d57600080fd5b5060405162004cf638038062004cf6833981016040819052620000509162000579565b8181604051806040016040528060058152602001644c656e696160d81b815250604051806040016040528060058152602001644c454e494160d81b8152508160009080519060200190620000a692919062000459565b508051620000bc90600190602084019062000459565b5050508051825114620001315760405162461bcd60e51b815260206004820152603260248201527f5061796d656e7453706c69747465723a2070617965657320616e6420736861726044820152710cae640d8cadccee8d040dad2e6dac2e8c6d60731b60648201526084015b60405180910390fd5b6000825111620001845760405162461bcd60e51b815260206004820152601a60248201527f5061796d656e7453706c69747465723a206e6f20706179656573000000000000604482015260640162000128565b60005b8251811015620001f057620001db838281518110620001aa57620001aa62000742565b6020026020010151838381518110620001c757620001c762000742565b60200260200101516200021560201b60201c565b80620001e7816200070e565b91505062000187565b5050506200020d620002076200040360201b60201c565b62000407565b50506200076e565b6001600160a01b038216620002825760405162461bcd60e51b815260206004820152602c60248201527f5061796d656e7453706c69747465723a206163636f756e74206973207468652060448201526b7a65726f206164647265737360a01b606482015260840162000128565b60008111620002d45760405162461bcd60e51b815260206004820152601d60248201527f5061796d656e7453706c69747465723a20736861726573206172652030000000604482015260640162000128565b6001600160a01b0382166000908152600c602052604090205415620003505760405162461bcd60e51b815260206004820152602b60248201527f5061796d656e7453706c69747465723a206163636f756e7420616c726561647960448201526a206861732073686172657360a81b606482015260840162000128565b600e8054600181019091557fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd0180546001600160a01b0319166001600160a01b0384169081179091556000908152600c60205260409020819055600a54620003ba908290620006b6565b600a55604080516001600160a01b0384168152602081018390527f40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac910160405180910390a15050565b3390565b600f80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8280546200046790620006d1565b90600052602060002090601f0160209004810192826200048b5760008555620004d6565b82601f10620004a657805160ff1916838001178555620004d6565b82800160010185558215620004d6579182015b82811115620004d6578251825591602001919060010190620004b9565b50620004e4929150620004e8565b5090565b5b80821115620004e45760008155600101620004e9565b600082601f8301126200051157600080fd5b815160206200052a620005248362000690565b6200065d565b80838252828201915082860187848660051b89010111156200054b57600080fd5b60005b858110156200056c578151845292840192908401906001016200054e565b5090979650505050505050565b600080604083850312156200058d57600080fd5b82516001600160401b0380821115620005a557600080fd5b818501915085601f830112620005ba57600080fd5b81516020620005cd620005248362000690565b8083825282820191508286018a848660051b8901011115620005ee57600080fd5b600096505b84871015620006295780516001600160a01b03811681146200061457600080fd5b835260019690960195918301918301620005f3565b50918801519196509093505050808211156200064457600080fd5b506200065385828601620004ff565b9150509250929050565b604051601f8201601f191681016001600160401b038111828210171562000688576200068862000758565b604052919050565b60006001600160401b03821115620006ac57620006ac62000758565b5060051b60200190565b60008219821115620006cc57620006cc6200072c565b500190565b600181811c90821680620006e657607f821691505b602082108114156200070857634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156200072557620007256200072c565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b614578806200077e6000396000f3fe60806040526004361061030c5760003560e01c8063672629e11161019a578063a574cea4116100e1578063daa023aa1161008a578063ebb3151011610064578063ebb31510146108f4578063f2de711714610914578063f2fde38b1461093457600080fd5b8063daa023aa14610881578063e33b7de314610896578063e985e9c5146108ab57600080fd5b8063b972f32d116100bb578063b972f32d1461080b578063c87b56dd1461082b578063ce7c2ac21461084b57600080fd5b8063a574cea41461079e578063b0e1d7f3146107cb578063b88d4fde146107eb57600080fd5b80638da5cb5b1161014357806398d5fdca1161011d57806398d5fdca146107305780639a559e1314610745578063a22cb4651461077e57600080fd5b80638da5cb5b146106c757806395d89b41146106e55780639852595c146106fa57600080fd5b80637bffb4ce116101745780637bffb4ce146106655780638462151c1461067a5780638b83209b146106a757600080fd5b8063672629e11461061057806370a0823114610630578063715018a61461065057600080fd5b80632f745c591161025e578063512379d81161020757806359533d6c116101e157806359533d6c146105d057806360d938dc146105d85780636352211e146105f057600080fd5b8063512379d81461056657806355f804b314610593578063564566a8146105b357600080fd5b806342842e0e1161023857806342842e0e1461050657806345290110146105265780634f6ccce71461054657600080fd5b80632f745c59146104bc57806332cb6b0c146104dc5780633a98ef39146104f157600080fd5b8063095ea7b3116102c057806318160ddd1161029a57806318160ddd1461045d578063191655871461047c57806323b872dd1461049c57600080fd5b8063095ea7b3146104155780630c837bbb146104355780631249c58b1461045557600080fd5b806305957706116102f157806305957706146103a657806306fdde03146103c8578063081812fc146103dd57600080fd5b806301ffc9a71461035a578063049c5c491461038f57600080fd5b36610355577f6ef95f06320e7a25a04a175ca677b7052bdd97131872c2192525a629f51be77033604080516001600160a01b0390921682523460208301520160405180910390a1005b600080fd5b34801561036657600080fd5b5061037a610375366004613964565b610954565b60405190151581526020015b60405180910390f35b34801561039b57600080fd5b506103a4610965565b005b3480156103b257600080fd5b506103bb6109fe565b6040516103869190613fa6565b3480156103d457600080fd5b506103bb610a90565b3480156103e957600080fd5b506103fd6103f8366004613b1d565b610a9f565b6040516001600160a01b039091168152602001610386565b34801561042157600080fd5b506103a46104303660046138a6565b610b45565b34801561044157600080fd5b506103a4610450366004613b5b565b610c77565b6103a4610d38565b34801561046957600080fd5b506008545b604051908152602001610386565b34801561048857600080fd5b506103a4610497366004613775565b610e58565b3480156104a857600080fd5b506103a46104b73660046137cb565b610e61565b3480156104c857600080fd5b5061046e6104d73660046138a6565b610ee8565b3480156104e857600080fd5b5061046e60ca81565b3480156104fd57600080fd5b50600a5461046e565b34801561051257600080fd5b506103a46105213660046137cb565b610f90565b34801561053257600080fd5b506103a461054136600461399e565b610fab565b34801561055257600080fd5b5061046e610561366004613b1d565b611011565b34801561057257600080fd5b50610586610581366004613b1d565b6110b5565b60405161038691906141bf565b34801561059f57600080fd5b506103a46105ae366004613a7a565b611363565b3480156105bf57600080fd5b50601354610100900460ff1661037a565b6103a46113d4565b3480156105e457600080fd5b5060135460ff1661037a565b3480156105fc57600080fd5b506103fd61060b366004613b1d565b61156c565b34801561061c57600080fd5b506103a461062b366004613be1565b6115f7565b34801561063c57600080fd5b5061046e61064b366004613775565b6117c8565b34801561065c57600080fd5b506103a4611862565b34801561067157600080fd5b506103a46118c8565b34801561068657600080fd5b5061069a610695366004613775565b611936565b6040516103869190613f62565b3480156106b357600080fd5b506103fd6106c2366004613b1d565b6119d8565b3480156106d357600080fd5b50600f546001600160a01b03166103fd565b3480156106f157600080fd5b506103bb611a08565b34801561070657600080fd5b5061046e610715366004613775565b6001600160a01b03166000908152600d602052604090205490565b34801561073c57600080fd5b5060105461046e565b34801561075157600080fd5b5061037a610760366004613775565b6001600160a01b031660009081526012602052604090205460ff1690565b34801561078a57600080fd5b506103a4610799366004613878565b611a17565b3480156107aa57600080fd5b506107be6107b9366004613b1d565b611adc565b6040516103869190613fb9565b3480156107d757600080fd5b506103a46107e6366004613b36565b611ebe565b3480156107f757600080fd5b506103a461080636600461380c565b611fbe565b34801561081757600080fd5b506103a461082636600461399e565b61204c565b34801561083757600080fd5b506103bb610846366004613b1d565b6120a6565b34801561085757600080fd5b5061046e610866366004613775565b6001600160a01b03166000908152600c602052604090205490565b34801561088d57600080fd5b5060115461046e565b3480156108a257600080fd5b50600b5461046e565b3480156108b757600080fd5b5061037a6108c6366004613792565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561090057600080fd5b506103a461090f3660046138d2565b6122c0565b34801561092057600080fd5b506103a461092f3660046139e0565b612392565b34801561094057600080fd5b506103a461094f366004613775565b6123ec565b600061095f826124cb565b92915050565b600f546001600160a01b031633146109c45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b601380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff81166101009182900460ff1615909102179055565b606060158054610a0d90614345565b80601f0160208091040260200160405190810160405280929190818152602001828054610a3990614345565b8015610a865780601f10610a5b57610100808354040283529160200191610a86565b820191906000526020600020905b815481529060010190602001808311610a6957829003601f168201915b5050505050905090565b606060008054610a0d90614345565b6000818152600260205260408120546001600160a01b0316610b295760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e000000000000000000000000000000000000000060648201526084016109bb565b506000908152600460205260409020546001600160a01b031690565b6000610b508261156c565b9050806001600160a01b0316836001600160a01b03161415610bda5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084016109bb565b336001600160a01b0382161480610bf65750610bf681336108c6565b610c685760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016109bb565b610c728383612521565b505050565b600f546001600160a01b03163314610cd15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109bb565b600060168560ca8110610ce657610ce6614493565b60030201905083816000019080519060200190610d049291906135b7565b508251610d1a90600183019060208601906135b7565b508151610d3090600283019060208501906135b7565b505050505050565b601354610100900460ff16610d8f5760405162461bcd60e51b815260206004820152601960248201527f5075626c69632073616c65206973206e6f74206163746976650000000000000060448201526064016109bb565b6000610d9a60085490565b905060115460ca610dab9190614302565b8110610df95760405162461bcd60e51b815260206004820152601360248201527f546f6b656e732061726520736f6c64206f75740000000000000000000000000060448201526064016109bb565b346010541115610e4b5760405162461bcd60e51b815260206004820152601260248201527f496e73756666696369656e742066756e6473000000000000000000000000000060448201526064016109bb565b610e5533826125a7565b50565b610e55816125c1565b610e6b33826127bb565b610edd5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656400000000000000000000000000000060648201526084016109bb565b610c728383836128bf565b6000610ef3836117c8565b8210610f675760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e647300000000000000000000000000000000000000000060648201526084016109bb565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b610c7283838360405180602001604052806000815250611fbe565b600f546001600160a01b031633146110055760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109bb565b610c726015838361363b565b600061101c60085490565b82106110905760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e6473000000000000000000000000000000000000000060648201526084016109bb565b600882815481106110a3576110a3614493565b90600052602060002001549050919050565b6110d960405180606001604052806060815260200160608152602001606081525090565b600f546001600160a01b031633146111335760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109bb565b60ca82106111835760405162461bcd60e51b815260206004820152601060248201527f6964206f7574206f6620626f756e64730000000000000000000000000000000060448201526064016109bb565b60168260ca811061119657611196614493565b600302016040518060600160405290816000820180546111b590614345565b80601f01602080910402602001604051908101604052809291908181526020018280546111e190614345565b801561122e5780601f106112035761010080835404028352916020019161122e565b820191906000526020600020905b81548152906001019060200180831161121157829003601f168201915b5050505050815260200160018201805461124790614345565b80601f016020809104026020016040519081016040528092919081815260200182805461127390614345565b80156112c05780601f10611295576101008083540402835291602001916112c0565b820191906000526020600020905b8154815290600101906020018083116112a357829003601f168201915b505050505081526020016002820180546112d990614345565b80601f016020809104026020016040519081016040528092919081815260200182805461130590614345565b80156113525780601f1061132757610100808354040283529160200191611352565b820191906000526020600020905b81548152906001019060200180831161133557829003601f168201915b50505050508152505090505b919050565b600f546001600160a01b031633146113bd5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109bb565b80516113d09060149060208401906135b7565b5050565b60135460ff166114265760405162461bcd60e51b815260206004820152601560248201527f50726573616c65206973206e6f7420616374697665000000000000000000000060448201526064016109bb565b3360009081526012602052604090205460ff1680151560011461148b5760405162461bcd60e51b815260206004820152601c60248201527f4e6f7420656c696769626c6520666f72207468652070726573616c650000000060448201526064016109bb565b600061149660085490565b905060115460ca6114a79190614302565b81106114f55760405162461bcd60e51b815260206004820152601360248201527f546f6b656e732061726520736f6c64206f75740000000000000000000000000060448201526064016109bb565b3460105411156115475760405162461bcd60e51b815260206004820152601260248201527f496e73756666696369656e742066756e6473000000000000000000000000000060448201526064016109bb565b61155133826125a7565b5050336000908152601260205260409020805460ff19169055565b6000818152600260205260408120546001600160a01b03168061095f5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e000000000000000000000000000000000000000000000060648201526084016109bb565b600f546001600160a01b031633146116515760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109bb565b60006102748660ca811061166757611667614493565b600502019050848160010190805190602001906116859291906135b7565b50835161169b90600283019060208701906135b7565b5082516116b190600383019060208601906135b7565b50600481015460005b83518110156117b4578181106116d95760048301805460010181556000525b60008360040182815481106116f0576116f0614493565b90600052602060002090600202019050600085838151811061171457611714614493565b60209081029190910181015180820151845461ffff90911662010000027fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000ffff909116178455604081015180519193506117739260018601929101906135b7565b505181547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff909116179055806117ac81614399565b9150506116ba565b5050805460ff191660011790555050505050565b60006001600160a01b0382166118465760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f20616464726573730000000000000000000000000000000000000000000060648201526084016109bb565b506001600160a01b031660009081526003602052604090205490565b600f546001600160a01b031633146118bc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109bb565b6118c66000612aaf565b565b600f546001600160a01b031633146119225760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109bb565b6013805460ff19811660ff90911615179055565b60606000611943836117c8565b905060008167ffffffffffffffff811115611960576119606144c2565b604051908082528060200260200182016040528015611989578160200160208202803683370190505b50905060005b828110156119d0576119a18582610ee8565b8282815181106119b3576119b3614493565b6020908102919091010152806119c881614399565b91505061198f565b509392505050565b6000600e82815481106119ed576119ed614493565b6000918252602090912001546001600160a01b031692915050565b606060018054610a0d90614345565b6001600160a01b038216331415611a705760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016109bb565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b611b106040518060a00160405280600015158152602001606081526020016060815260200160608152602001606081525090565b600f546001600160a01b03163314611b6a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109bb565b60ca8210611bba5760405162461bcd60e51b815260206004820152601060248201527f6964206f7574206f6620626f756e64730000000000000000000000000000000060448201526064016109bb565b6102748260ca8110611bce57611bce614493565b6040805160a0810190915260059190910291909101805460ff1615158252600181018054602084019190611c0190614345565b80601f0160208091040260200160405190810160405280929190818152602001828054611c2d90614345565b8015611c7a5780601f10611c4f57610100808354040283529160200191611c7a565b820191906000526020600020905b815481529060010190602001808311611c5d57829003601f168201915b50505050508152602001600282018054611c9390614345565b80601f0160208091040260200160405190810160405280929190818152602001828054611cbf90614345565b8015611d0c5780601f10611ce157610100808354040283529160200191611d0c565b820191906000526020600020905b815481529060010190602001808311611cef57829003601f168201915b50505050508152602001600382018054611d2590614345565b80601f0160208091040260200160405190810160405280929190818152602001828054611d5190614345565b8015611d9e5780601f10611d7357610100808354040283529160200191611d9e565b820191906000526020600020905b815481529060010190602001808311611d8157829003601f168201915b5050505050815260200160048201805480602002602001604051908101604052809291908181526020016000905b82821015611eb05760008481526020908190206040805160608101825260028602909201805461ffff808216855262010000909104169383019390935260018301805492939291840191611e1f90614345565b80601f0160208091040260200160405190810160405280929190818152602001828054611e4b90614345565b8015611e985780601f10611e6d57610100808354040283529160200191611e98565b820191906000526020600020905b815481529060010190602001808311611e7b57829003601f168201915b50505050508152505081526020019060010190611dcc565b505050915250909392505050565b600f546001600160a01b03163314611f185760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109bb565b601154821115611f6a5760405162461bcd60e51b815260206004820152601860248201527f4578636565647320746865206d6178207265736572766564000000000000000060448201526064016109bb565b6000611f7560085490565b905060005b83811015611fa757611f9583611f908385614299565b6125a7565b80611f9f81614399565b915050611f7a565b5082601154611fb69190614302565b601155505050565b611fc833836127bb565b61203a5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656400000000000000000000000000000060648201526084016109bb565b61204684848484612b19565b50505050565b600f546001600160a01b031633146113d05760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109bb565b606060ca82106120f85760405162461bcd60e51b815260206004820152601060248201527f6964206f7574206f6620626f756e64730000000000000000000000000000000060448201526064016109bb565b600060168360ca811061210d5761210d614493565b60030201905060006102748460ca811061212957612129614493565b6005020190507370B5c2B4E3f7429b6C1B6BA012e9Cd56C2Edb3a363a4199e5182846040518363ffffffff1660e01b81526004016121689291906140a2565b60206040518083038186803b15801561218057600080fd5b505af4158015612194573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121b89190613947565b1561226b576040517f791b05870000000000000000000000000000000000000000000000000000000081527370B5c2B4E3f7429b6C1B6BA012e9Cd56C2Edb3a39063791b05879061220f90849086906004016140a2565b60006040518083038186803b15801561222757600080fd5b505af415801561223b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526122639190810190613aaf565b949350505050565b600061227685612ba2565b9050600081511161229657604051806020016040528060008152506122b7565b806040516020016122a79190613ee5565b6040516020818303038152906040525b95945050505050565b600f546001600160a01b0316331461231a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109bb565b60005b60ff8116821115610c725760016012600085858560ff1681811061234357612343614493565b90506020020160208101906123589190613775565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790558061238a816143d2565b91505061231d565b600f546001600160a01b03163314610d305760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109bb565b600f546001600160a01b031633146124465760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109bb565b6001600160a01b0381166124c25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016109bb565b610e5581612aaf565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f780e9d6300000000000000000000000000000000000000000000000000000000148061095f575061095f82612c8b565b600081815260046020526040902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038416908117909155819061256e8261156c565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6113d0828260405180602001604052806000815250612d6e565b6001600160a01b0381166000908152600c602052604090205461264c5760405162461bcd60e51b815260206004820152602660248201527f5061796d656e7453706c69747465723a206163636f756e7420686173206e6f2060448201527f736861726573000000000000000000000000000000000000000000000000000060648201526084016109bb565b6000600b544761265c9190614299565b6001600160a01b0383166000908152600d6020908152604080832054600a54600c90935290832054939450919261269390856142c5565b61269d91906142b1565b6126a79190614302565b90508061271c5760405162461bcd60e51b815260206004820152602b60248201527f5061796d656e7453706c69747465723a206163636f756e74206973206e6f742060448201527f647565207061796d656e7400000000000000000000000000000000000000000060648201526084016109bb565b6001600160a01b0383166000908152600d6020526040902054612740908290614299565b6001600160a01b0384166000908152600d6020526040902055600b54612767908290614299565b600b556127748382612df7565b604080516001600160a01b0385168152602081018390527fdf20fd1e76bc69d672e4814fafb2c449bba3a5369d8359adf9e05e6fde87b056910160405180910390a1505050565b6000818152600260205260408120546001600160a01b03166128455760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e000000000000000000000000000000000000000060648201526084016109bb565b60006128508361156c565b9050806001600160a01b0316846001600160a01b0316148061288b5750836001600160a01b031661288084610a9f565b6001600160a01b0316145b8061226357506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff16612263565b826001600160a01b03166128d28261156c565b6001600160a01b03161461294e5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201527f73206e6f74206f776e000000000000000000000000000000000000000000000060648201526084016109bb565b6001600160a01b0382166129c95760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016109bb565b6129d4838383612f10565b6129df600082612521565b6001600160a01b0383166000908152600360205260408120805460019290612a08908490614302565b90915550506001600160a01b0382166000908152600360205260408120805460019290612a36908490614299565b909155505060008181526002602052604080822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600f80546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b612b248484846128bf565b612b3084848484612f1b565b6120465760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016109bb565b6000818152600260205260409020546060906001600160a01b0316612c2f5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e000000000000000000000000000000000060648201526084016109bb565b6000612c396130c8565b90506000815111612c595760405180602001604052806000815250612c84565b80612c63846130d7565b604051602001612c74929190613eb6565b6040516020818303038152906040525b9392505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd000000000000000000000000000000000000000000000000000000001480612d1e57507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061095f57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083161461095f565b612d788383613209565b612d856000848484612f1b565b610c725760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016109bb565b80471015612e475760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016109bb565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612e94576040519150601f19603f3d011682016040523d82523d6000602084013e612e99565b606091505b5050905080610c725760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016109bb565b610c7283838361336f565b60006001600160a01b0384163b156130bd576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a0290612f78903390899088908890600401613f26565b602060405180830381600087803b158015612f9257600080fd5b505af1925050508015612fc2575060408051601f3d908101601f19168201909252612fbf91810190613981565b60015b613072573d808015612ff0576040519150601f19603f3d011682016040523d82523d6000602084013e612ff5565b606091505b50805161306a5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016109bb565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050612263565b506001949350505050565b606060148054610a0d90614345565b60608161311757505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115613141578061312b81614399565b915061313a9050600a836142b1565b915061311b565b60008167ffffffffffffffff81111561315c5761315c6144c2565b6040519080825280601f01601f191660200182016040528015613186576020820181803683370190505b5090505b84156122635761319b600183614302565b91506131a8600a866143f2565b6131b3906030614299565b60f81b8183815181106131c8576131c8614493565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350613202600a866142b1565b945061318a565b6001600160a01b03821661325f5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016109bb565b6000818152600260205260409020546001600160a01b0316156132c45760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016109bb565b6132d060008383612f10565b6001600160a01b03821660009081526003602052604081208054600192906132f9908490614299565b909155505060008181526002602052604080822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160a01b0383166133ca576133c581600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b6133ed565b816001600160a01b0316836001600160a01b0316146133ed576133ed8382613427565b6001600160a01b03821661340457610c72816134c4565b826001600160a01b0316826001600160a01b031614610c7257610c728282613573565b60006001613434846117c8565b61343e9190614302565b600083815260076020526040902054909150808214613491576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b6008546000906134d690600190614302565b600083815260096020526040812054600880549394509092849081106134fe576134fe614493565b90600052602060002001549050806008838154811061351f5761351f614493565b600091825260208083209091019290925582815260099091526040808220849055858252812055600880548061355757613557614464565b6001900381819060005260206000200160009055905550505050565b600061357e836117c8565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b8280546135c390614345565b90600052602060002090601f0160209004810192826135e5576000855561362b565b82601f106135fe57805160ff191683800117855561362b565b8280016001018555821561362b579182015b8281111561362b578251825591602001919060010190613610565b506136379291506136af565b5090565b82805461364790614345565b90600052602060002090601f016020900481019282613669576000855561362b565b82601f106136825782800160ff1982351617855561362b565b8280016001018555821561362b579182015b8281111561362b578235825591602001919060010190613694565b5b8082111561363757600081556001016136b0565b60008083601f8401126136d657600080fd5b50813567ffffffffffffffff8111156136ee57600080fd5b60208301915083602082850101111561370657600080fd5b9250929050565b600082601f83011261371e57600080fd5b813561373161372c82614271565b614240565b81815284602083860101111561374657600080fd5b816020850160208301376000918101602001919091529392505050565b803561ffff8116811461135e57600080fd5b60006020828403121561378757600080fd5b8135612c84816144f1565b600080604083850312156137a557600080fd5b82356137b0816144f1565b915060208301356137c0816144f1565b809150509250929050565b6000806000606084860312156137e057600080fd5b83356137eb816144f1565b925060208401356137fb816144f1565b929592945050506040919091013590565b6000806000806080858703121561382257600080fd5b843561382d816144f1565b9350602085013561383d816144f1565b925060408501359150606085013567ffffffffffffffff81111561386057600080fd5b61386c8782880161370d565b91505092959194509250565b6000806040838503121561388b57600080fd5b8235613896816144f1565b915060208301356137c081614506565b600080604083850312156138b957600080fd5b82356138c4816144f1565b946020939093013593505050565b600080602083850312156138e557600080fd5b823567ffffffffffffffff808211156138fd57600080fd5b818501915085601f83011261391157600080fd5b81358181111561392057600080fd5b8660208260051b850101111561393557600080fd5b60209290920196919550909350505050565b60006020828403121561395957600080fd5b8151612c8481614506565b60006020828403121561397657600080fd5b8135612c8481614514565b60006020828403121561399357600080fd5b8151612c8481614514565b600080602083850312156139b157600080fd5b823567ffffffffffffffff8111156139c857600080fd5b6139d4858286016136c4565b90969095509350505050565b600080600080600080606087890312156139f957600080fd5b863567ffffffffffffffff80821115613a1157600080fd5b613a1d8a838b016136c4565b90985096506020890135915080821115613a3657600080fd5b613a428a838b016136c4565b90965094506040890135915080821115613a5b57600080fd5b50613a6889828a016136c4565b979a9699509497509295939492505050565b600060208284031215613a8c57600080fd5b813567ffffffffffffffff811115613aa357600080fd5b6122638482850161370d565b600060208284031215613ac157600080fd5b815167ffffffffffffffff811115613ad857600080fd5b8201601f81018413613ae957600080fd5b8051613af761372c82614271565b818152856020838501011115613b0c57600080fd5b6122b7826020830160208601614319565b600060208284031215613b2f57600080fd5b5035919050565b60008060408385031215613b4957600080fd5b8235915060208301356137c0816144f1565b60008060008060808587031215613b7157600080fd5b84359350602085013567ffffffffffffffff80821115613b9057600080fd5b613b9c8883890161370d565b94506040870135915080821115613bb257600080fd5b613bbe8883890161370d565b93506060870135915080821115613bd457600080fd5b5061386c8782880161370d565b600080600080600060a08688031215613bf957600080fd5b8535945067ffffffffffffffff8060208801351115613c1757600080fd5b613c27886020890135890161370d565b94508060408801351115613c3a57600080fd5b613c4a886040890135890161370d565b93508060608801351115613c5d57600080fd5b613c6d886060890135890161370d565b92508060808801351115613c8057600080fd5b6080870135870188601f820112613c9657600080fd5b8181351115613ca757613ca76144c2565b613cb76020823560051b01614240565b8082358252602082019150602083018b6020853560051b8601011115613cdc57600080fd5b60005b8435811015613d7e578582351115613cf657600080fd5b6060601f19833587018f03011215613d0d57600080fd5b613d15614217565b613d2460208435880101613763565b8152613d3560408435880101613763565b60208201528660608435880101351115613d4e57600080fd5b613d648e8435880160608101350160200161370d565b604082015284526020938401939190910190600101613cdf565b5050809450505050509295509295909350565b60008151808452613da9816020860160208601614319565b601f01601f19169290920160200192915050565b8054600090600181811c9080831680613dd757607f831692505b6020808410821415613e12577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b838852818015613e295760018114613e3d57613e6b565b60ff198616828a0152604089019650613e6b565b876000528160002060005b86811015613e635781548b8201850152908501908301613e48565b8a0183019750505b50505050505092915050565b606082526000613e8a6060840183613dbd565b8381036020850152613e9f8160018501613dbd565b905083810360408501526122638160028501613dbd565b60008351613ec8818460208801614319565b835190830190613edc818360208801614319565b01949350505050565b60008251613ef7818460208701614319565b7f2e6a736f6e000000000000000000000000000000000000000000000000000000920191825250600501919050565b60006001600160a01b03808716835280861660208401525083604083015260806060830152613f586080830184613d91565b9695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015613f9a57835183529284019291840191600101613f7e565b50909695505050505050565b602081526000612c846020830184613d91565b60006020808352835115158184015280840151604060a081860152613fe160c0860183613d91565b915080860151601f196060818886030181890152613fff8584613d91565b94508089015192508188860301608089015261401b8584613d91565b60808a0151898203840160a08b015280518083529196508701935086860190600581901b8701880160005b8281101561409257888203860184528651805161ffff90811684528b820151168b84015288015188830186905261407f86840182613d91565b978b0197948b0194925050600101614046565b509b9a5050505050505050505050565b6000604080835260ff8554161515818401526001606060a0818601526140cd60e08601838901613dbd565b60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08088840301608089015261410683838c01613dbd565b9250808884030160a089015261411f8360038c01613dbd565b88810390910160c089015260048a018054808352600091825260208083209395508086019392600583901b87018201905b8381101561419b57601f19888303018652845461ffff8082168452808260101c16858501525050888b83015261418a8983018b8701613dbd565b958301959487019491508901614150565b508b8103828d01526141ad818e613e77565b9e9d5050505050505050505050505050565b6020815260008251606060208401526141db6080840182613d91565b90506020840151601f19808584030160408601526141f98383613d91565b92506040860151915080858403016060860152506122b78282613d91565b6040516060810167ffffffffffffffff8111828210171561423a5761423a6144c2565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715614269576142696144c2565b604052919050565b600067ffffffffffffffff82111561428b5761428b6144c2565b50601f01601f191660200190565b600082198211156142ac576142ac614406565b500190565b6000826142c0576142c0614435565b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156142fd576142fd614406565b500290565b60008282101561431457614314614406565b500390565b60005b8381101561433457818101518382015260200161431c565b838111156120465750506000910152565b600181811c9082168061435957607f821691505b60208210811415614393577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156143cb576143cb614406565b5060010190565b600060ff821660ff8114156143e9576143e9614406565b60010192915050565b60008261440157614401614435565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6001600160a01b0381168114610e5557600080fd5b8015158114610e5557600080fd5b7fffffffff0000000000000000000000000000000000000000000000000000000081168114610e5557600080fdfea26469706673582212200cf3a67ea41a04bb25a6b2d407c7db8d6952b5a52f77c6a2061dcea3d9bc3b0364736f6c63430008060033",
  "deployedBytecode": "$6ca4c9a272396ac50a3dff0df8f353fb3d$__63a4199e5182846040518363ffffffff1660e01b81526004016121689291906140a2565b60206040518083038186803b15801561218057600080fd5b505af4158015612194573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121b89190613947565b1561226b576040517f791b058700000000000000000000000000000000000000000000000000000000815273__$6ca4c9a272396ac50a3dff0df8f353fb3d$__9063791b05879061220f90849086906004016140a2565b60006040518083038186803b15801561222757600080fd5b505af415801561223b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526122639190810190613aaf565b949350505050565b600061227685612ba2565b9050600081511161229657604051806020016040528060008152506122b7565b806040516020016122a79190613ee5565b6040516020818303038152906040525b95945050505050565b600f546001600160a01b0316331461231a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109bb565b60005b60ff8116821115610c725760016012600085858560ff1681811061234357612343614493565b90506020020160208101906123589190613775565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790558061238a816143d2565b91505061231d565b600f546001600160a01b03163314610d305760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109bb565b600f546001600160a01b031633146124465760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109bb565b6001600160a01b0381166124c25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016109bb565b610e5581612aaf565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f780e9d6300000000000000000000000000000000000000000000000000000000148061095f575061095f82612c8b565b600081815260046020526040902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038416908117909155819061256e8261156c565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6113d0828260405180602001604052806000815250612d6e565b6001600160a01b0381166000908152600c602052604090205461264c5760405162461bcd60e51b815260206004820152602660248201527f5061796d656e7453706c69747465723a206163636f756e7420686173206e6f2060448201527f736861726573000000000000000000000000000000000000000000000000000060648201526084016109bb565b6000600b544761265c9190614299565b6001600160a01b0383166000908152600d6020908152604080832054600a54600c90935290832054939450919261269390856142c5565b61269d91906142b1565b6126a79190614302565b90508061271c5760405162461bcd60e51b815260206004820152602b60248201527f5061796d656e7453706c69747465723a206163636f756e74206973206e6f742060448201527f647565207061796d656e7400000000000000000000000000000000000000000060648201526084016109bb565b6001600160a01b0383166000908152600d6020526040902054612740908290614299565b6001600160a01b0384166000908152600d6020526040902055600b54612767908290614299565b600b556127748382612df7565b604080516001600160a01b0385168152602081018390527fdf20fd1e76bc69d672e4814fafb2c449bba3a5369d8359adf9e05e6fde87b056910160405180910390a1505050565b6000818152600260205260408120546001600160a01b03166128455760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e000000000000000000000000000000000000000060648201526084016109bb565b60006128508361156c565b9050806001600160a01b0316846001600160a01b0316148061288b5750836001600160a01b031661288084610a9f565b6001600160a01b0316145b8061226357506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff16612263565b826001600160a01b03166128d28261156c565b6001600160a01b03161461294e5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201527f73206e6f74206f776e000000000000000000000000000000000000000000000060648201526084016109bb565b6001600160a01b0382166129c95760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016109bb565b6129d4838383612f10565b6129df600082612521565b6001600160a01b0383166000908152600360205260408120805460019290612a08908490614302565b90915550506001600160a01b0382166000908152600360205260408120805460019290612a36908490614299565b909155505060008181526002602052604080822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600f80546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b612b248484846128bf565b612b3084848484612f1b565b6120465760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016109bb565b6000818152600260205260409020546060906001600160a01b0316612c2f5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e000000000000000000000000000000000060648201526084016109bb565b6000612c396130c8565b90506000815111612c595760405180602001604052806000815250612c84565b80612c63846130d7565b604051602001612c74929190613eb6565b6040516020818303038152906040525b9392505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd000000000000000000000000000000000000000000000000000000001480612d1e57507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061095f57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083161461095f565b612d788383613209565b612d856000848484612f1b565b610c725760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016109bb565b80471015612e475760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016109bb565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612e94576040519150601f19603f3d011682016040523d82523d6000602084013e612e99565b606091505b5050905080610c725760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016109bb565b610c7283838361336f565b60006001600160a01b0384163b156130bd576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a0290612f78903390899088908890600401613f26565b602060405180830381600087803b158015612f9257600080fd5b505af1925050508015612fc2575060408051601f3d908101601f19168201909252612fbf91810190613981565b60015b613072573d808015612ff0576040519150601f19603f3d011682016040523d82523d6000602084013e612ff5565b606091505b50805161306a5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016109bb565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050612263565b506001949350505050565b606060148054610a0d90614345565b60608161311757505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115613141578061312b81614399565b915061313a9050600a836142b1565b915061311b565b60008167ffffffffffffffff81111561315c5761315c6144c2565b6040519080825280601f01601f191660200182016040528015613186576020820181803683370190505b5090505b84156122635761319b600183614302565b91506131a8600a866143f2565b6131b3906030614299565b60f81b8183815181106131c8576131c8614493565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350613202600a866142b1565b945061318a565b6001600160a01b03821661325f5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016109bb565b6000818152600260205260409020546001600160a01b0316156132c45760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016109bb565b6132d060008383612f10565b6001600160a01b03821660009081526003602052604081208054600192906132f9908490614299565b909155505060008181526002602052604080822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160a01b0383166133ca576133c581600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b6133ed565b816001600160a01b0316836001600160a01b0316146133ed576133ed8382613427565b6001600160a01b03821661340457610c72816134c4565b826001600160a01b0316826001600160a01b031614610c7257610c728282613573565b60006001613434846117c8565b61343e9190614302565b600083815260076020526040902054909150808214613491576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b6008546000906134d690600190614302565b600083815260096020526040812054600880549394509092849081106134fe576134fe614493565b90600052602060002001549050806008838154811061351f5761351f614493565b600091825260208083209091019290925582815260099091526040808220849055858252812055600880548061355757613557614464565b6001900381819060005260206000200160009055905550505050565b600061357e836117c8565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b8280546135c390614345565b90600052602060002090601f0160209004810192826135e5576000855561362b565b82601f106135fe57805160ff191683800117855561362b565b8280016001018555821561362b579182015b8281111561362b578251825591602001919060010190613610565b506136379291506136af565b5090565b82805461364790614345565b90600052602060002090601f016020900481019282613669576000855561362b565b82601f106136825782800160ff1982351617855561362b565b8280016001018555821561362b579182015b8281111561362b578235825591602001919060010190613694565b5b8082111561363757600081556001016136b0565b60008083601f8401126136d657600080fd5b50813567ffffffffffffffff8111156136ee57600080fd5b60208301915083602082850101111561370657600080fd5b9250929050565b600082601f83011261371e57600080fd5b813561373161372c82614271565b614240565b81815284602083860101111561374657600080fd5b816020850160208301376000918101602001919091529392505050565b803561ffff8116811461135e57600080fd5b60006020828403121561378757600080fd5b8135612c84816144f1565b600080604083850312156137a557600080fd5b82356137b0816144f1565b915060208301356137c0816144f1565b809150509250929050565b6000806000606084860312156137e057600080fd5b83356137eb816144f1565b925060208401356137fb816144f1565b929592945050506040919091013590565b6000806000806080858703121561382257600080fd5b843561382d816144f1565b9350602085013561383d816144f1565b925060408501359150606085013567ffffffffffffffff81111561386057600080fd5b61386c8782880161370d565b91505092959194509250565b6000806040838503121561388b57600080fd5b8235613896816144f1565b915060208301356137c081614506565b600080604083850312156138b957600080fd5b82356138c4816144f1565b946020939093013593505050565b600080602083850312156138e557600080fd5b823567ffffffffffffffff808211156138fd57600080fd5b818501915085601f83011261391157600080fd5b81358181111561392057600080fd5b8660208260051b850101111561393557600080fd5b60209290920196919550909350505050565b60006020828403121561395957600080fd5b8151612c8481614506565b60006020828403121561397657600080fd5b8135612c8481614514565b60006020828403121561399357600080fd5b8151612c8481614514565b600080602083850312156139b157600080fd5b823567ffffffffffffffff8111156139c857600080fd5b6139d4858286016136c4565b90969095509350505050565b600080600080600080606087890312156139f957600080fd5b863567ffffffffffffffff80821115613a1157600080fd5b613a1d8a838b016136c4565b90985096506020890135915080821115613a3657600080fd5b613a428a838b016136c4565b90965094506040890135915080821115613a5b57600080fd5b50613a6889828a016136c4565b979a9699509497509295939492505050565b600060208284031215613a8c57600080fd5b813567ffffffffffffffff811115613aa357600080fd5b6122638482850161370d565b600060208284031215613ac157600080fd5b815167ffffffffffffffff811115613ad857600080fd5b8201601f81018413613ae957600080fd5b8051613af761372c82614271565b818152856020838501011115613b0c57600080fd5b6122b7826020830160208601614319565b600060208284031215613b2f57600080fd5b5035919050565b60008060408385031215613b4957600080fd5b8235915060208301356137c0816144f1565b60008060008060808587031215613b7157600080fd5b84359350602085013567ffffffffffffffff80821115613b9057600080fd5b613b9c8883890161370d565b94506040870135915080821115613bb257600080fd5b613bbe8883890161370d565b93506060870135915080821115613bd457600080fd5b5061386c8782880161370d565b600080600080600060a08688031215613bf957600080fd5b8535945067ffffffffffffffff8060208801351115613c1757600080fd5b613c27886020890135890161370d565b94508060408801351115613c3a57600080fd5b613c4a886040890135890161370d565b93508060608801351115613c5d57600080fd5b613c6d886060890135890161370d565b92508060808801351115613c8057600080fd5b6080870135870188601f820112613c9657600080fd5b8181351115613ca757613ca76144c2565b613cb76020823560051b01614240565b8082358252602082019150602083018b6020853560051b8601011115613cdc57600080fd5b60005b8435811015613d7e578582351115613cf657600080fd5b6060601f19833587018f03011215613d0d57600080fd5b613d15614217565b613d2460208435880101613763565b8152613d3560408435880101613763565b60208201528660608435880101351115613d4e57600080fd5b613d648e8435880160608101350160200161370d565b604082015284526020938401939190910190600101613cdf565b5050809450505050509295509295909350565b60008151808452613da9816020860160208601614319565b601f01601f19169290920160200192915050565b8054600090600181811c9080831680613dd757607f831692505b6020808410821415613e12577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b838852818015613e295760018114613e3d57613e6b565b60ff198616828a0152604089019650613e6b565b876000528160002060005b86811015613e635781548b8201850152908501908301613e48565b8a0183019750505b50505050505092915050565b606082526000613e8a6060840183613dbd565b8381036020850152613e9f8160018501613dbd565b905083810360408501526122638160028501613dbd565b60008351613ec8818460208801614319565b835190830190613edc818360208801614319565b01949350505050565b60008251613ef7818460208701614319565b7f2e6a736f6e000000000000000000000000000000000000000000000000000000920191825250600501919050565b60006001600160a01b03808716835280861660208401525083604083015260806060830152613f586080830184613d91565b9695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015613f9a57835183529284019291840191600101613f7e565b50909695505050505050565b602081526000612c846020830184613d91565b60006020808352835115158184015280840151604060a081860152613fe160c0860183613d91565b915080860151601f196060818886030181890152613fff8584613d91565b94508089015192508188860301608089015261401b8584613d91565b60808a0151898203840160a08b015280518083529196508701935086860190600581901b8701880160005b8281101561409257888203860184528651805161ffff90811684528b820151168b84015288015188830186905261407f86840182613d91565b978b0197948b0194925050600101614046565b509b9a5050505050505050505050565b6000604080835260ff8554161515818401526001606060a0818601526140cd60e08601838901613dbd565b60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08088840301608089015261410683838c01613dbd565b9250808884030160a089015261411f8360038c01613dbd565b88810390910160c089015260048a018054808352600091825260208083209395508086019392600583901b87018201905b8381101561419b57601f19888303018652845461ffff8082168452808260101c16858501525050888b83015261418a8983018b8701613dbd565b958301959487019491508901614150565b508b8103828d01526141ad818e613e77565b9e9d5050505050505050505050505050565b6020815260008251606060208401526141db6080840182613d91565b90506020840151601f19808584030160408601526141f98383613d91565b92506040860151915080858403016060860152506122b78282613d91565b6040516060810167ffffffffffffffff8111828210171561423a5761423a6144c2565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715614269576142696144c2565b604052919050565b600067ffffffffffffffff82111561428b5761428b6144c2565b50601f01601f191660200190565b600082198211156142ac576142ac614406565b500190565b6000826142c0576142c0614435565b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156142fd576142fd614406565b500290565b60008282101561431457614314614406565b500390565b60005b8381101561433457818101518382015260200161431c565b838111156120465750506000910152565b600181811c9082168061435957607f821691505b60208210811415614393577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156143cb576143cb614406565b5060010190565b600060ff821660ff8114156143e9576143e9614406565b60010192915050565b60008261440157614401614435565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6001600160a01b0381168114610e5557600080fd5b8015158114610e5557600080fd5b7fffffffff0000000000000000000000000000000000000000000000000000000081168114610e5557600080fdfea26469706673582212200cf3a67ea41a04bb25a6b2d407c7db8d6952b5a52f77c6a2061dcea3d9bc3b0364736f6c63430008060033",
  "libraries": {
    "LeniaDescriptor": "0x70B5c2B4E3f7429b6C1B6BA012e9Cd56C2Edb3a3"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "payee(uint256)": {
        "details": "Getter for the address of the payee number `index`."
      },
      "release(address)": {
        "details": "Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the total shares and their previous withdrawals."
      },
      "released(address)": {
        "details": "Getter for the amount of Ether already released to a payee."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "shares(address)": {
        "details": "Getter for the amount of shares held by an account."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalReleased()": {
        "details": "Getter for the total amount of Ether already released."
      },
      "totalShares()": {
        "details": "Getter for the total shares held by payees."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 424,
        "contract": "contracts/Lenia.sol:Lenia",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 426,
        "contract": "contracts/Lenia.sol:Lenia",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 430,
        "contract": "contracts/Lenia.sol:Lenia",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 434,
        "contract": "contracts/Lenia.sol:Lenia",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 438,
        "contract": "contracts/Lenia.sol:Lenia",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 444,
        "contract": "contracts/Lenia.sol:Lenia",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1363,
        "contract": "contracts/Lenia.sol:Lenia",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1367,
        "contract": "contracts/Lenia.sol:Lenia",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1370,
        "contract": "contracts/Lenia.sol:Lenia",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1374,
        "contract": "contracts/Lenia.sol:Lenia",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 131,
        "contract": "contracts/Lenia.sol:Lenia",
        "label": "_totalShares",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 133,
        "contract": "contracts/Lenia.sol:Lenia",
        "label": "_totalReleased",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 137,
        "contract": "contracts/Lenia.sol:Lenia",
        "label": "_shares",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 141,
        "contract": "contracts/Lenia.sol:Lenia",
        "label": "_released",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 144,
        "contract": "contracts/Lenia.sol:Lenia",
        "label": "_payees",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 7,
        "contract": "contracts/Lenia.sol:Lenia",
        "label": "_owner",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 2636,
        "contract": "contracts/Lenia.sol:Lenia",
        "label": "_price",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 2639,
        "contract": "contracts/Lenia.sol:Lenia",
        "label": "_reserved",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 2643,
        "contract": "contracts/Lenia.sol:Lenia",
        "label": "_presaleList",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2646,
        "contract": "contracts/Lenia.sol:Lenia",
        "label": "_isPresaleActive",
        "offset": 0,
        "slot": "19",
        "type": "t_bool"
      },
      {
        "astId": 2649,
        "contract": "contracts/Lenia.sol:Lenia",
        "label": "_isSaleActive",
        "offset": 1,
        "slot": "19",
        "type": "t_bool"
      },
      {
        "astId": 2651,
        "contract": "contracts/Lenia.sol:Lenia",
        "label": "__baseURI",
        "offset": 0,
        "slot": "20",
        "type": "t_string_storage"
      },
      {
        "astId": 2653,
        "contract": "contracts/Lenia.sol:Lenia",
        "label": "engine",
        "offset": 0,
        "slot": "21",
        "type": "t_bytes_storage"
      },
      {
        "astId": 2658,
        "contract": "contracts/Lenia.sol:Lenia",
        "label": "leniaParams",
        "offset": 0,
        "slot": "22",
        "type": "t_array(t_struct(LeniaParams)3386_storage)202_storage"
      },
      {
        "astId": 2663,
        "contract": "contracts/Lenia.sol:Lenia",
        "label": "metadata",
        "offset": 0,
        "slot": "628",
        "type": "t_array(t_struct(LeniaMetadata)3399_storage)202_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(LeniaAttribute)3379_storage)dyn_storage": {
        "base": "t_struct(LeniaAttribute)3379_storage",
        "encoding": "dynamic_array",
        "label": "struct LeniaDescriptor.LeniaAttribute[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(LeniaMetadata)3399_storage)202_storage": {
        "base": "t_struct(LeniaMetadata)3399_storage",
        "encoding": "inplace",
        "label": "struct LeniaDescriptor.LeniaMetadata[202]",
        "numberOfBytes": "32320"
      },
      "t_array(t_struct(LeniaParams)3386_storage)202_storage": {
        "base": "t_struct(LeniaParams)3386_storage",
        "encoding": "inplace",
        "label": "struct LeniaDescriptor.LeniaParams[202]",
        "numberOfBytes": "19392"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(LeniaAttribute)3379_storage": {
        "encoding": "inplace",
        "label": "struct LeniaDescriptor.LeniaAttribute",
        "members": [
          {
            "astId": 3374,
            "contract": "contracts/Lenia.sol:Lenia",
            "label": "traitType",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 3376,
            "contract": "contracts/Lenia.sol:Lenia",
            "label": "value",
            "offset": 2,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 3378,
            "contract": "contracts/Lenia.sol:Lenia",
            "label": "numericalValue",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(LeniaMetadata)3399_storage": {
        "encoding": "inplace",
        "label": "struct LeniaDescriptor.LeniaMetadata",
        "members": [
          {
            "astId": 3388,
            "contract": "contracts/Lenia.sol:Lenia",
            "label": "metadataReady",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 3390,
            "contract": "contracts/Lenia.sol:Lenia",
            "label": "stringID",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 3392,
            "contract": "contracts/Lenia.sol:Lenia",
            "label": "imageURL",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 3394,
            "contract": "contracts/Lenia.sol:Lenia",
            "label": "animationURL",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 3398,
            "contract": "contracts/Lenia.sol:Lenia",
            "label": "leniaAttributes",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_struct(LeniaAttribute)3379_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(LeniaParams)3386_storage": {
        "encoding": "inplace",
        "label": "struct LeniaDescriptor.LeniaParams",
        "members": [
          {
            "astId": 3381,
            "contract": "contracts/Lenia.sol:Lenia",
            "label": "m",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 3383,
            "contract": "contracts/Lenia.sol:Lenia",
            "label": "s",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 3385,
            "contract": "contracts/Lenia.sol:Lenia",
            "label": "cells",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}