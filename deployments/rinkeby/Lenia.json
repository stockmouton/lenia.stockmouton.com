{
  "address": "0xCF65CbCC557aa6DB4856674a663eef39DC2ECf9C",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_SUPPLY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_number",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "claimReserved",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flipHasSaleStarted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getCells",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEngine",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getLeniaParams",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "m",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "s",
              "type": "string"
            }
          ],
          "internalType": "struct LeniaDescriptor.LeniaParams",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getMetadata",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "paddedID",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "imageURL",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "uint16",
                  "name": "traitType",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "value",
                  "type": "uint16"
                },
                {
                  "internalType": "string",
                  "name": "numericalValue",
                  "type": "string"
                }
              ],
              "internalType": "struct LeniaDescriptor.LeniaAttribute[]",
              "name": "leniaAttributes",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct LeniaDescriptor.LeniaMetadata",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReservedLeft",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasSaleStarted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "cellsInput",
          "type": "bytes"
        }
      ],
      "name": "setCells",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "engineInput",
          "type": "string"
        }
      ],
      "name": "setEngine",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "m",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "s",
          "type": "string"
        }
      ],
      "name": "setLeniaParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "paddedID",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "imageURL",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "traitType",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "value",
              "type": "uint16"
            },
            {
              "internalType": "string",
              "name": "numericalValue",
              "type": "string"
            }
          ],
          "internalType": "struct LeniaDescriptor.LeniaAttribute[]",
          "name": "attributes",
          "type": "tuple[]"
        }
      ],
      "name": "setMetadata",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newPrice",
          "type": "uint256"
        }
      ],
      "name": "setPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "tokensOfOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xef96bfff505c1312b0c8d44180020e956c709b4df2390febbe5470e8ce6b87c2",
  "receipt": {
    "to": null,
    "from": "0xdD11751cdD3f6EFf01B1f6151B640685bfa5dB4a",
    "contractAddress": "0xCF65CbCC557aa6DB4856674a663eef39DC2ECf9C",
    "transactionIndex": 35,
    "gasUsed": "3387733",
    "logsBloom": "0x
    "blockHash": "0x07841c8b9fefe7be9c257f0321a0889db800236785832523456f04957b881b50",
    "transactionHash": "0xef96bfff505c1312b0c8d44180020e956c709b4df2390febbe5470e8ce6b87c2",
    "logs": [
      {
        "transactionIndex": 35,
        "blockNumber": 9406820,
        "transactionHash": "0xef96bfff505c1312b0c8d44180020e956c709b4df2390febbe5470e8ce6b87c2",
        "address": "0xCF65CbCC557aa6DB4856674a663eef39DC2ECf9C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dd11751cdd3f6eff01b1f6151b640685bfa5db4a"
        ],
        "data": "0x",
        "logIndex": 69,
        "blockHash": "0x07841c8b9fefe7be9c257f0321a0889db800236785832523456f04957b881b50"
      }
    ],
    "blockNumber": 9406820,
    "cumulativeGasUsed": "11974146",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "1177458ffb71dbfdcf7df51647a08a1d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"claimReserved\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipHasSaleStarted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getCells\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEngine\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getLeniaParams\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"m\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"s\",\"type\":\"string\"}],\"internalType\":\"struct LeniaDescriptor.LeniaParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"paddedID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageURL\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"traitType\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"value\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"numericalValue\",\"type\":\"string\"}],\"internalType\":\"struct LeniaDescriptor.LeniaAttribute[]\",\"name\":\"leniaAttributes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct LeniaDescriptor.LeniaMetadata\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReservedLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasSaleStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"cellsInput\",\"type\":\"bytes\"}],\"name\":\"setCells\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"engineInput\",\"type\":\"string\"}],\"name\":\"setEngine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"m\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"s\",\"type\":\"string\"}],\"name\":\"setLeniaParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"paddedID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageURL\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"traitType\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"value\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"numericalValue\",\"type\":\"string\"}],\"internalType\":\"struct LeniaDescriptor.LeniaAttribute[]\",\"name\":\"attributes\",\"type\":\"tuple[]\"}],\"name\":\"setMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lenia.sol\":\"Lenia\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x41dc7bf7f69c668eb98aa078c5140a4d3c3b097124ee4b6058a649ca99688300\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/Lenia.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// @title Main contract for the Lenia collection\\n\\n/**********************************************\\n *                        .                   *\\n *                          ,,                *\\n *                      ......*#*             *\\n *                 .......    ..*%%,          *\\n *          .,,****,..             ,#(.       *\\n *         .,**((((*,.               .*(.     *\\n *          .**((**,,,,,,,             .*,    *\\n *        .......,,**(((((((*.          .,,   *\\n *       ...      ,*((##%&&&&@&(,        .,.  *\\n *       ..        ,((#&&@@@@@@@@&(*.  ..,,.  *\\n *    ,. ..          ,#&@@@@@@@@@@@%#(*,,,,.  *\\n *      ((,.           *%@@@@&%%%&&%#(((*,,.  *\\n *        (&*            *%@@@&&%%##(((**,.   *\\n *          (&(           .*(#%%##(((**,,.    *\\n *            .((,         .,*(((((**,..      *\\n *               .,*,,.....,,,,*,,,..         *\\n *                    ..........              *\\n**********************************************/\\n\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport { LeniaDescriptor } from \\\"./libs/LeniaDescriptor.sol\\\";\\n\\ncontract Lenia is ERC721, ERC721Enumerable, Ownable {\\n\\n    uint256 public constant MAX_SUPPLY = 202;\\n    uint256 private _price = 0.1 ether;\\n    uint256 private _reserved = 11;\\n\\n    bool private _hasSaleStarted;\\n    bool private switchToOnChain = false;\\n    string public baseURI;\\n\\n    string private engine;\\n    bytes[MAX_SUPPLY] private cells;\\n    LeniaDescriptor.LeniaParams[MAX_SUPPLY] private leniaParams;\\n    LeniaDescriptor.LeniaMetadata[MAX_SUPPLY] private metadata;\\n\\n    constructor() ERC721(\\\"Lenia\\\", \\\"LENIA\\\") {\\n        _hasSaleStarted = false;\\n    }\\n\\n    modifier whenSaleStarted() {\\n        require(_hasSaleStarted, \\\"Primary sale hasn't started yet\\\");\\n        _;\\n    }\\n\\n    function mint() external payable whenSaleStarted {\\n        uint256 supply = totalSupply();\\n        require(supply <= MAX_SUPPLY - _reserved, \\\"Tokens are sold out!\\\");\\n        require( _price <= msg.value, \\\"Inconsistent amount sent!\\\");\\n\\n        _safeMint(msg.sender, supply);\\n    }\\n\\n    function setEngine(string calldata engineInput) public onlyOwner {\\n        engine = engineInput;\\n    }\\n\\n    function getEngine() public view returns(string memory) {\\n        return engine;\\n    }\\n\\n    function setCells(uint256 id, bytes memory cellsInput) public onlyOwner {\\n        cells[id] = cellsInput;\\n    }\\n\\n    function getCells(uint256 id) public view returns(bytes memory) {\\n        return cells[id];\\n    }\\n\\n    function setLeniaParams(\\n        uint256 id,\\n        string memory m,\\n        string memory s\\n    )\\n        public\\n        onlyOwner\\n    {\\n        LeniaDescriptor.LeniaParams storage params = leniaParams[id];\\n        params.m = m;\\n        params.s = s;\\n    }\\n\\n    function getLeniaParams(uint256 id) public view onlyOwner returns(LeniaDescriptor.LeniaParams memory) {\\n        require(id < MAX_SUPPLY, \\\"id out of bounds\\\");\\n\\n        return leniaParams[id];\\n    }\\n\\n\\n    function setMetadata(\\n        uint256 id,\\n        string memory paddedID,\\n        string memory imageURL,\\n        LeniaDescriptor.LeniaAttribute[] memory attributes\\n    )\\n        public\\n        onlyOwner\\n    {\\n        LeniaDescriptor.LeniaMetadata storage params = metadata[id];\\n        params.paddedID = paddedID;\\n        params.imageURL = imageURL;\\n        uint256 attrLengths = params.leniaAttributes.length;\\n        for (uint256 i = 0; i < attributes.length; i++) {\\n            if (i >= attrLengths) {\\n                params.leniaAttributes.push();\\n            }\\n            LeniaDescriptor.LeniaAttribute storage storageAttr = params.leniaAttributes[i];\\n\\n            LeniaDescriptor.LeniaAttribute memory currentAttr = attributes[i];\\n            storageAttr.value = currentAttr.value;\\n            storageAttr.numericalValue = currentAttr.numericalValue;\\n            storageAttr.traitType = currentAttr.traitType;\\n        }\\n    }\\n\\n    function getMetadata(uint256 id) public view onlyOwner returns(LeniaDescriptor.LeniaMetadata memory) {\\n        require(id < MAX_SUPPLY, \\\"id out of bounds\\\");\\n\\n        return metadata[id];\\n    }\\n    \\n    function tokenURI(uint256 tokenId) public view virtual override(ERC721) returns (string memory) {\\n        if (switchToOnChain) {\\n            return LeniaDescriptor.constructTokenURI(metadata[tokenId], leniaParams[tokenId]);\\n        } else {\\n            string memory tokenURIstr = super.tokenURI(tokenId);\\n\\n            return bytes(tokenURIstr).length > 0 ? string(abi.encodePacked(tokenURIstr, \\\".json\\\")) : \\\"\\\";\\n        }\\n    }\\n\\n\\n    function flipHasSaleStarted() external onlyOwner {\\n        _hasSaleStarted = !_hasSaleStarted;\\n    }\\n\\n    function hasSaleStarted() public view returns(bool) {\\n        return _hasSaleStarted;\\n    }\\n\\n    function setBaseURI(string memory uri) external onlyOwner {\\n        baseURI = uri;\\n    }\\n\\n    function _baseURI() internal view override(ERC721) returns(string memory) {\\n        return baseURI;\\n    }\\n\\n    // Make it possible to change the price for the dutch auction\\n    function setPrice(uint256 _newPrice) external onlyOwner {\\n        _price = _newPrice;\\n    }\\n\\n    function getPrice() public view returns (uint256){\\n        return _price;\\n    }\\n\\n    function getReservedLeft() public view returns (uint256) {\\n        return _reserved;\\n    }\\n\\n    function tokensOfOwner(address _owner) public view returns(uint256[] memory) {\\n        uint256 tokenCount = balanceOf(_owner);\\n\\n        uint256[] memory tokensId = new uint256[](tokenCount);\\n        for(uint256 i; i < tokenCount; i++){\\n            tokensId[i] = tokenOfOwnerByIndex(_owner, i);\\n        }\\n        return tokensId;\\n    }\\n\\n    function claimReserved(uint256 _number, address _receiver) external onlyOwner {\\n        require(_number <= _reserved, \\\"That would exceed the max reserved.\\\");\\n\\n        uint256 _tokenId = totalSupply();\\n        for (uint256 i; i < _number; i++) {\\n            _safeMint(_receiver, _tokenId + i);\\n        }\\n\\n        _reserved = _reserved - _number;\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId)\\n        internal\\n        override(ERC721, ERC721Enumerable)\\n    {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC721, ERC721Enumerable)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\",\"keccak256\":\"0x92241358eb3d0453813eda98c8c8d98c76841d43bc0633b9ce06c240bd3ccaed\",\"license\":\"MIT\"},\"contracts/libs/LeniaDescriptor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// @title The library to get the Lenia metadata\\n\\n/**********************************************\\n *                        .                   *\\n *                          ,,                *\\n *                      ......*#*             *\\n *                 .......    ..*%%,          *\\n *          .,,****,..             ,#(.       *\\n *         .,**((((*,.               .*(.     *\\n *          .**((**,,,,,,,             .*,    *\\n *        .......,,**(((((((*.          .,,   *\\n *       ...      ,*((##%&&&&@&(,        .,.  *\\n *       ..        ,((#&&@@@@@@@@&(*.  ..,,.  *\\n *    ,. ..          ,#&@@@@@@@@@@@%#(*,,,,.  *\\n *      ((,.           *%@@@@&%%%&&%#(((*,,.  *\\n *        (&*            *%@@@&&%%##(((**,.   *\\n *          (&(           .*(#%%##(((**,,.    *\\n *            .((,         .,*(((((**,..      *\\n *               .,*,,.....,,,,*,,,..         *\\n *                    ..........              *\\n**********************************************/\\n\\npragma solidity ^0.8.6;\\n\\nlibrary LeniaDescriptor {\\n    string public constant NAME_PREFIX = \\\"Lenia #\\\";\\n    string public constant DESCRIPTION = \\\"A beautiful lifeform creature known as Lenia.\\\";\\n    string public constant EXTERNAL_LINK = \\\"https://lenia.world\\\";\\n\\n    struct LeniaAttribute {\\n        uint16 traitType;\\n        uint16 value;\\n        string numericalValue;\\n    }\\n\\n    struct LeniaParams {\\n        string m;\\n        string s;\\n    }\\n\\n    struct LeniaMetadata {\\n        string paddedID;\\n        string imageURL;\\n        LeniaAttribute[] leniaAttributes;\\n    }\\n\\n    /**\\n     * @notice Construct an ERC721 token URI.\\n     */\\n    function constructTokenURI(LeniaMetadata memory metadata, LeniaParams memory leniaParams)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        bytes memory nameField = abi.encodePacked(\\n            '\\\"name\\\":\\\"', NAME_PREFIX, metadata.paddedID, '\\\"'\\n        );\\n        bytes memory descField = abi.encodePacked(\\n            '\\\"description\\\":\\\"', DESCRIPTION, '\\\"'\\n        );\\n        bytes memory extLinkField = abi.encodePacked(\\n            '\\\"external_link\\\":\\\"', EXTERNAL_LINK, '\\\"'\\n        );\\n        bytes memory imgField = abi.encodePacked(\\n            '\\\"image\\\":\\\"', metadata.imageURL, '\\\"'\\n        );\\n        bytes memory attrField = abi.encodePacked(\\n            '\\\"attributes\\\":', getAttributesJSON(metadata)\\n        );\\n        bytes memory configField = abi.encodePacked(\\n            '\\\"config\\\": ', getConfigJSON(leniaParams)\\n        );\\n\\n        // prettier-ignore\\n        return string(\\n            abi.encodePacked(\\n                \\\"data:application/json,\\\",\\n                abi.encodePacked(\\n                    \\\"{\\\",\\n                        nameField, \\\",\\\",\\n                        descField, \\\",\\\",\\n                        extLinkField, \\\",\\\",\\n                        imgField, \\\",\\\",\\n                        attrField, \\\",\\\",\\n                        configField,\\n                    \\\"}\\\"\\n                )\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice Get the Lenia attributes\\n     */\\n    function getAttributesJSON(LeniaMetadata memory metadata)\\n        private\\n        pure\\n        returns (string memory json)\\n    {\\n        string memory output = \\\"[\\\";\\n        for (uint256 index = 0; index < metadata.leniaAttributes.length; index++) {\\n            if (bytes(output).length == 1) {\\n                output = string(abi.encodePacked(\\n                    output,\\n                    getAttributeJSON(metadata.leniaAttributes[index])\\n                ));\\n            } else {\\n                output = string(abi.encodePacked(\\n                    output, \\\",\\\",\\n                    getAttributeJSON(metadata.leniaAttributes[index])\\n                ));\\n            }\\n\\n        }\\n        output = string(abi.encodePacked(output, \\\"]\\\"));\\n\\n        return output;\\n    }\\n\\n    /**\\n     * @notice Get one Lenia attribute\\n     */\\n    function getAttributeJSON(LeniaAttribute memory attr)\\n        private\\n        pure\\n        returns (string memory json)\\n    {\\n        string memory currentTraitType = getTraitType(attr.traitType);\\n        bytes32 currentTraitTypeHash = keccak256(bytes(currentTraitType));\\n        string memory currentValue;\\n        if (currentTraitTypeHash == keccak256(bytes(\\\"colormap\\\"))) {\\n            currentValue = getColormap(attr.value);\\n        } else if (currentTraitTypeHash == keccak256(bytes(\\\"family\\\"))) {\\n            currentValue = getFamily(attr.value);\\n        } else if (currentTraitTypeHash == keccak256(bytes(\\\"ki\\\"))) {\\n            currentValue = getKi(attr.value);\\n        } else if (currentTraitTypeHash == keccak256(bytes(\\\"aura\\\"))) {\\n            currentValue = getAura(attr.value);\\n        } else if (currentTraitTypeHash == keccak256(bytes(\\\"weight\\\"))) {\\n            currentValue = getWeight(attr.value);\\n        } else if (currentTraitTypeHash == keccak256(bytes(\\\"robustness\\\"))) {\\n            currentValue = getRobustness(attr.value);\\n        } else if (currentTraitTypeHash == keccak256(bytes(\\\"avoidance\\\"))) {\\n            currentValue = getAvoidance(attr.value);\\n        } else if (currentTraitTypeHash == keccak256(bytes(\\\"velocity\\\"))) {\\n            currentValue = getVelocity(attr.value);\\n        } else if (currentTraitTypeHash == keccak256(bytes(\\\"spread\\\"))) {\\n            currentValue = getSpread(attr.value);\\n        }\\n        return string(abi.encodePacked(\\n            \\\"{\\\",\\n                '\\\"value\\\":\\\"', currentValue, '\\\",',\\n                '\\\"trait_type\\\":\\\"', currentTraitType, '\\\",',\\n                '\\\"numerical_value\\\":', attr.numericalValue,\\n            \\\"}\\\"\\n        ));\\n    }\\n\\n    /**\\n     * @notice Get the trait type\\n     */\\n    function getTraitType(uint16 index)\\n        private\\n        pure\\n        returns (string memory)\\n    {\\n        string[9] memory traitTypes = [\\n            \\\"colormap\\\", \\\"family\\\", \\\"ki\\\", \\\"aura\\\", \\\"weight\\\", \\\"robustness\\\", \\\"avoidance\\\", \\\"velocity\\\", \\\"spread\\\"\\n        ];\\n\\n        return traitTypes[index];\\n    }\\n\\n    /**\\n     * @notice Get the trait type\\n     */\\n     function getColormap(uint16 index)\\n        private\\n        pure\\n        returns (string memory)\\n    {\\n        string[10] memory colormaps = [\\n            \\\"blackwhite\\\", \\\"carmine-blue\\\", \\\"carmine-green\\\", \\\"cinnamon\\\", \\\"golden\\\", \\\"msdos\\\", \\\"rainbow\\\", \\\"rainbow_transparent\\\", \\\"salvia\\\", \\\"whiteblack\\\"\\n        ];\\n\\n        return colormaps[index];\\n    }\\n\\n    /**\\n     * @notice Get the family\\n     */\\n    function getFamily(uint16 index)\\n        private\\n        pure\\n        returns (string memory)\\n    {\\n        string[12] memory familys = [\\n            \\\"genesis\\\", \\\"aquarium\\\", \\\"terrarium\\\", \\\"aerium\\\", \\\"ignis\\\", \\\"maelstrom\\\", \\\"amphibium\\\", \\\"pulsium\\\", \\\"etherium\\\", \\\"nexus\\\", \\\"oscillium\\\", \\\"kaleidium\\\"\\n        ];\\n\\n        return familys[index];\\n    }\\n\\n    /**\\n     * @notice Get the ki\\n     */\\n    function getKi(uint16 index)\\n        private\\n        pure\\n        returns (string memory)\\n    {\\n        string[4] memory kis = [\\n            \\\"kiai\\\", \\\"kiroku\\\", \\\"kihaku\\\", \\\"hibiki\\\"\\n        ];\\n\\n        return kis[index];\\n    }\\n\\n    /**\\n     * @notice Get the aura\\n     */\\n    function getAura(uint16 index)\\n        private\\n        pure\\n        returns (string memory)\\n    {\\n        string[5] memory auras = [\\n            \\\"etheric\\\", \\\"mental\\\", \\\"astral\\\", \\\"celestial\\\", \\\"spiritual\\\"\\n        ];\\n\\n        return auras[index];\\n    }\\n\\n    /**\\n     * @notice Get the weight\\n     */\\n    function getWeight(uint16 index)\\n        private\\n        pure\\n        returns (string memory)\\n    {\\n        string[5] memory weights = [\\n            \\\"fly\\\", \\\"feather\\\", \\\"welter\\\", \\\"cruiser\\\", \\\"heavy\\\"\\n        ];\\n\\n        return weights[index];\\n    }\\n\\n    /**\\n     * @notice Get the robustness\\n     */\\n    function getRobustness(uint16 index)\\n        private\\n        pure\\n        returns (string memory)\\n    {\\n        string[5] memory robustnesss = [\\n            \\\"aluminium\\\", \\\"iron\\\", \\\"steel\\\", \\\"tungsten\\\", \\\"vibranium\\\"\\n        ];\\n\\n        return robustnesss[index];\\n    }\\n\\n    /**\\n     * @notice Get the avoidance\\n     */\\n    function getAvoidance(uint16 index)\\n        private\\n        pure\\n        returns (string memory)\\n    {\\n        string[5] memory avoidances = [\\n            \\\"kawarimi\\\", \\\"shunshin\\\", \\\"raiton\\\", \\\"hiraishin\\\", \\\"kamui\\\"\\n        ];\\n\\n        return avoidances[index];\\n    }\\n\\n    /**\\n     * @notice Get the velocity\\n     */\\n    function getVelocity(uint16 index)\\n        private\\n        pure\\n        returns (string memory)\\n    {\\n        string[5] memory velocitys = [\\n            \\\"immovable\\\", \\\"unrushed\\\", \\\"swift\\\", \\\"turbo\\\", \\\"flash\\\"\\n        ];\\n\\n        return velocitys[index];\\n    }\\n\\n    /**\\n     * @notice Get the spread\\n     */\\n    function getSpread(uint16 index)\\n        private\\n        pure\\n        returns (string memory)\\n    {\\n        string[5] memory spreads = [\\n            \\\"demie\\\", \\\"standard\\\", \\\"magnum\\\", \\\"joeroboam\\\", \\\"balthazar\\\"\\n        ];\\n\\n        return spreads[index];\\n    }\\n\\n    /**\\n     * @notice Get the Lenia configuration\\n     */\\n    function getConfigJSON(LeniaParams memory leniaParams)\\n        private\\n        pure\\n        returns (string memory json)\\n    {\\n        return string(abi.encodePacked(\\n            \\\"{\\\",\\n                '\\\"kernels_params\\\":', getKernelParamsJSON(leniaParams), ',',\\n                '\\\"world_metadata\\\":', getWorldParamsJSON(),\\n            \\\"}\\\"\\n        ));\\n    }\\n\\n    /**\\n     * @notice Get the Lenia world_metadata\\n     */\\n    function getWorldParamsJSON()\\n        private\\n        pure\\n        returns (string memory json)\\n    {\\n        return '{\\\"R\\\": 13, \\\"T\\\": 10, \\\"nb_channels\\\": 1, \\\"nb_dims\\\": 2, \\\"scale\\\": 1}';\\n    }\\n\\n    /**\\n     * @notice Get the Lenia kernels_metadata\\n     */\\n    function getKernelParamsJSON(LeniaParams memory leniaParams)\\n        private\\n        pure\\n        returns (string memory json)\\n    {\\n        return string(abi.encodePacked(\\n            \\\"[\\\",\\n                '{\\\"b\\\": \\\"1\\\", \\\"c_in\\\": 0, \\\"c_out\\\": 0, \\\"gf_id\\\": 0, \\\"h\\\": 1, \\\"k_id\\\": 0,',\\n                '\\\"m\\\": ', leniaParams.m, ',',\\n                '\\\"q\\\": 4, \\\"r\\\": 1,',\\n                '\\\"s\\\": ', leniaParams.s, '}',\\n            \\\"]\\\"\\n        ));\\n    }\\n}\\n\",\"keccak256\":\"0x716a43b4794e592ce423cc248cf0a0dd189e2dd3457a5cc2643efed699472f7d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405267016345785d8a0000600b908155600c55600d805461ff00191690553480156200002d57600080fd5b50604051806040016040528060058152602001644c656e696160d81b815250604051806040016040528060058152602001644c454e494160d81b8152508160009080519060200190620000829291906200011b565b508051620000989060019060208401906200011b565b505050620000b5620000af620000c560201b60201c565b620000c9565b600d805460ff19169055620001fe565b3390565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8280546200012990620001c1565b90600052602060002090601f0160209004810192826200014d576000855562000198565b82601f106200016857805160ff191683800117855562000198565b8280016001018555821562000198579182015b82811115620001985782518255916020019190600101906200017b565b50620001a6929150620001aa565b5090565b5b80821115620001a65760008155600101620001ab565b600181811c90821680620001d657607f821691505b60208210811415620001f857634e487b7160e01b600052602260045260246000fd5b50919050565b613a51806200020e6000396000f3fe6080604052600436106102855760003560e01c80636c0360eb11610153578063a574cea4116100cb578063c87b56dd1161007f578063e0c9fbc711610064578063e0c9fbc7146106d2578063e985e9c5146106e7578063f2fde38b1461073057600080fd5b8063c87b56dd1461069d578063daa023aa146106bd57600080fd5b8063b0e1d7f3116100b0578063b0e1d7f31461063d578063b419a1161461065d578063b88d4fde1461067d57600080fd5b8063a574cea4146105f0578063afa8ee1d1461061d57600080fd5b80638da5cb5b1161012257806395d89b411161010757806395d89b41146105a657806398d5fdca146105bb578063a22cb465146105d057600080fd5b80638da5cb5b1461056857806391b7f5ed1461058657600080fd5b80636c0360eb146104f157806370a0823114610506578063715018a6146105265780638462151c1461053b57600080fd5b8063261aff4111610201578063489b13ba116101b5578063512379d81161019a578063512379d81461048457806355f804b3146104b15780636352211e146104d157600080fd5b8063489b13ba146104445780634f6ccce71461046457600080fd5b80632f745c59116101e65780632f745c59146103ef57806332cb6b0c1461040f57806342842e0e1461042457600080fd5b8063261aff41146103af5780632b88c5af146103cf57600080fd5b8063095ea7b31161025857806318160ddd1161023d57806318160ddd146103585780631c8b232d1461037757806323b872dd1461038f57600080fd5b8063095ea7b31461032e5780631249c58b1461035057600080fd5b806301ffc9a71461028a57806305957706146102bf57806306fdde03146102e1578063081812fc146102f6575b600080fd5b34801561029657600080fd5b506102aa6102a5366004612f8d565b610750565b60405190151581526020015b60405180910390f35b3480156102cb57600080fd5b506102d4610761565b6040516102b69190613570565b3480156102ed57600080fd5b506102d46107f3565b34801561030257600080fd5b506103166103113660046130e5565b610802565b6040516001600160a01b0390911681526020016102b6565b34801561033a57600080fd5b5061034e610349366004612f63565b6108ad565b005b61034e6109df565b34801561036457600080fd5b506008545b6040519081526020016102b6565b34801561038357600080fd5b50600d5460ff166102aa565b34801561039b57600080fd5b5061034e6103aa366004612e83565b610afb565b3480156103bb57600080fd5b506102d46103ca3660046130e5565b610b82565b3480156103db57600080fd5b5061034e6103ea366004612fc7565b610c28565b3480156103fb57600080fd5b5061036961040a366004612f63565b610c8e565b34801561041b57600080fd5b5061036960ca81565b34801561043057600080fd5b5061034e61043f366004612e83565b610d36565b34801561045057600080fd5b5061034e61045f3660046131d5565b610d51565b34801561047057600080fd5b5061036961047f3660046130e5565b610f01565b34801561049057600080fd5b506104a461049f3660046130e5565b610fa5565b6040516102b69190613737565b3480156104bd57600080fd5b5061034e6104cc366004613039565b6111b1565b3480156104dd57600080fd5b506103166104ec3660046130e5565b611222565b3480156104fd57600080fd5b506102d46112ad565b34801561051257600080fd5b50610369610521366004612e35565b61133b565b34801561053257600080fd5b5061034e6113d5565b34801561054757600080fd5b5061055b610556366004612e35565b61143b565b6040516102b6919061352c565b34801561057457600080fd5b50600a546001600160a01b0316610316565b34801561059257600080fd5b5061034e6105a13660046130e5565b6114dd565b3480156105b257600080fd5b506102d461153c565b3480156105c757600080fd5b50600b54610369565b3480156105dc57600080fd5b5061034e6105eb366004612f27565b61154b565b3480156105fc57600080fd5b5061061061060b3660046130e5565b61162e565b6040516102b69190613583565b34801561062957600080fd5b5061034e610638366004613168565b61195a565b34801561064957600080fd5b5061034e6106583660046130fe565b611a04565b34801561066957600080fd5b5061034e610678366004613121565b611b2a565b34801561068957600080fd5b5061034e610698366004612ebf565b611bac565b3480156106a957600080fd5b506102d46106b83660046130e5565b611c3a565b3480156106c957600080fd5b50600c54610369565b3480156106de57600080fd5b5061034e611d5a565b3480156106f357600080fd5b506102aa610702366004612e50565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561073c57600080fd5b5061034e61074b366004612e35565b611de6565b600061075b82611ec5565b92915050565b6060600f805461077090613861565b80601f016020809104026020016040519081016040528092919081815260200182805461079c90613861565b80156107e95780601f106107be576101008083540402835291602001916107e9565b820191906000526020600020905b8154815290600101906020018083116107cc57829003601f168201915b5050505050905090565b60606000805461077090613861565b6000818152600260205260408120546001600160a01b03166108915760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e000000000000000000000000000000000000000060648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006108b882611222565b9050806001600160a01b0316836001600160a01b031614156109425760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610888565b336001600160a01b038216148061095e575061095e8133610702565b6109d05760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610888565b6109da8383611f1b565b505050565b600d5460ff16610a315760405162461bcd60e51b815260206004820152601f60248201527f5072696d6172792073616c65206861736e2774207374617274656420796574006044820152606401610888565b6000610a3c60085490565b9050600c5460ca610a4d919061381e565b811115610a9c5760405162461bcd60e51b815260206004820152601460248201527f546f6b656e732061726520736f6c64206f7574210000000000000000000000006044820152606401610888565b34600b541115610aee5760405162461bcd60e51b815260206004820152601960248201527f496e636f6e73697374656e7420616d6f756e742073656e7421000000000000006044820152606401610888565b610af83382611fa1565b50565b610b053382611fbb565b610b775760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610888565b6109da8383836120c3565b606060108260ca8110610b9757610b9761398f565b018054610ba390613861565b80601f0160208091040260200160405190810160405280929190818152602001828054610bcf90613861565b8015610c1c5780601f10610bf157610100808354040283529160200191610c1c565b820191906000526020600020905b815481529060010190602001808311610bff57829003601f168201915b50505050509050919050565b600a546001600160a01b03163314610c825760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610888565b6109da600f8383612c8b565b6000610c998361133b565b8210610d0d5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e64730000000000000000000000000000000000000000006064820152608401610888565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6109da83838360405180602001604052806000815250611bac565b600a546001600160a01b03163314610dab5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610888565b600061026e8560ca8110610dc157610dc161398f565b60030201905083816000019080519060200190610ddf929190612d2d565b508251610df59060018301906020860190612d2d565b50600281015460005b8351811015610ef857818110610e1d5760028301805460010181556000525b6000836002018281548110610e3457610e3461398f565b906000526020600020906002020190506000858381518110610e5857610e5861398f565b60209081029190910181015180820151845461ffff90911662010000027fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000ffff90911617845560408101518051919350610eb7926001860192910190612d2d565b505181547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff90911617905580610ef0816138b5565b915050610dfe565b50505050505050565b6000610f0c60085490565b8210610f805760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e647300000000000000000000000000000000000000006064820152608401610888565b60088281548110610f9357610f9361398f565b90600052602060002001549050919050565b6040805180820190915260608082526020820152600a546001600160a01b031633146110135760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610888565b60ca82106110635760405162461bcd60e51b815260206004820152601060248201527f6964206f7574206f6620626f756e6473000000000000000000000000000000006044820152606401610888565b60da8260ca81106110765761107661398f565b6002020160405180604001604052908160008201805461109590613861565b80601f01602080910402602001604051908101604052809291908181526020018280546110c190613861565b801561110e5780601f106110e35761010080835404028352916020019161110e565b820191906000526020600020905b8154815290600101906020018083116110f157829003601f168201915b5050505050815260200160018201805461112790613861565b80601f016020809104026020016040519081016040528092919081815260200182805461115390613861565b80156111a05780601f10611175576101008083540402835291602001916111a0565b820191906000526020600020905b81548152906001019060200180831161118357829003601f168201915b50505050508152505090505b919050565b600a546001600160a01b0316331461120b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610888565b805161121e90600e906020840190612d2d565b5050565b6000818152600260205260408120546001600160a01b03168061075b5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e00000000000000000000000000000000000000000000006064820152608401610888565b600e80546112ba90613861565b80601f01602080910402602001604051908101604052809291908181526020018280546112e690613861565b80156113335780601f1061130857610100808354040283529160200191611333565b820191906000526020600020905b81548152906001019060200180831161131657829003601f168201915b505050505081565b60006001600160a01b0382166113b95760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f2061646472657373000000000000000000000000000000000000000000006064820152608401610888565b506001600160a01b031660009081526003602052604090205490565b600a546001600160a01b0316331461142f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610888565b61143960006122b3565b565b606060006114488361133b565b905060008167ffffffffffffffff811115611465576114656139be565b60405190808252806020026020018201604052801561148e578160200160208202803683370190505b50905060005b828110156114d5576114a68582610c8e565b8282815181106114b8576114b861398f565b6020908102919091010152806114cd816138b5565b915050611494565b509392505050565b600a546001600160a01b031633146115375760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610888565b600b55565b60606001805461077090613861565b6001600160a01b0382163314156115a45760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610888565b3360008181526005602090815260408083206001600160a01b0387168085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b61165260405180606001604052806060815260200160608152602001606081525090565b600a546001600160a01b031633146116ac5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610888565b60ca82106116fc5760405162461bcd60e51b815260206004820152601060248201527f6964206f7574206f6620626f756e6473000000000000000000000000000000006044820152606401610888565b61026e8260ca81106117105761171061398f565b6003020160405180606001604052908160008201805461172f90613861565b80601f016020809104026020016040519081016040528092919081815260200182805461175b90613861565b80156117a85780601f1061177d576101008083540402835291602001916117a8565b820191906000526020600020905b81548152906001019060200180831161178b57829003601f168201915b505050505081526020016001820180546117c190613861565b80601f01602080910402602001604051908101604052809291908181526020018280546117ed90613861565b801561183a5780601f1061180f5761010080835404028352916020019161183a565b820191906000526020600020905b81548152906001019060200180831161181d57829003601f168201915b5050505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b8282101561194c5760008481526020908190206040805160608101825260028602909201805461ffff8082168552620100009091041693830193909352600183018054929392918401916118bb90613861565b80601f01602080910402602001604051908101604052809291908181526020018280546118e790613861565b80156119345780601f1061190957610100808354040283529160200191611934565b820191906000526020600020905b81548152906001019060200180831161191757829003601f168201915b50505050508152505081526020019060010190611868565b505050915250909392505050565b600a546001600160a01b031633146119b45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610888565b600060da8460ca81106119c9576119c961398f565b600202019050828160000190805190602001906119e7929190612d2d565b5081516119fd9060018301906020850190612d2d565b5050505050565b600a546001600160a01b03163314611a5e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610888565b600c54821115611ad65760405162461bcd60e51b815260206004820152602360248201527f5468617420776f756c642065786365656420746865206d61782072657365727660448201527f65642e00000000000000000000000000000000000000000000000000000000006064820152608401610888565b6000611ae160085490565b905060005b83811015611b1357611b0183611afc83856137f2565b611fa1565b80611b0b816138b5565b915050611ae6565b5082600c54611b22919061381e565b600c55505050565b600a546001600160a01b03163314611b845760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610888565b8060108360ca8110611b9857611b9861398f565b0190805190602001906109da929190612d2d565b611bb63383611fbb565b611c285760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610888565b611c348484848461231d565b50505050565b600d54606090610100900460ff1615611d0757734Bbbd491a058F4b0AFe3FcB597d9F68a035D433b63791b058761026e8460ca8110611c7b57611c7b61398f565b6003020160da8560ca8110611c9257611c9261398f565b600202016040518363ffffffff1660e01b8152600401611cb3929190613643565b60006040518083038186803b158015611ccb57600080fd5b505af4158015611cdf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261075b919081019061306e565b6000611d12836123a6565b90506000815111611d325760405180602001604052806000815250611d53565b80604051602001611d4391906134af565b6040516020818303038152906040525b9392505050565b600a546001600160a01b03163314611db45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610888565b600d80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00811660ff90911615179055565b600a546001600160a01b03163314611e405760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610888565b6001600160a01b038116611ebc5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610888565b610af8816122b3565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f780e9d6300000000000000000000000000000000000000000000000000000000148061075b575061075b82612478565b600081815260046020526040902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0384169081179091558190611f6882611222565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b61121e82826040518060200160405280600081525061255b565b6000818152600260205260408120546001600160a01b03166120455760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e00000000000000000000000000000000000000006064820152608401610888565b600061205083611222565b9050806001600160a01b0316846001600160a01b0316148061208b5750836001600160a01b031661208084610802565b6001600160a01b0316145b806120bb57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b03166120d682611222565b6001600160a01b0316146121525760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201527f73206e6f74206f776e00000000000000000000000000000000000000000000006064820152608401610888565b6001600160a01b0382166121cd5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610888565b6121d88383836125e4565b6121e3600082611f1b565b6001600160a01b038316600090815260036020526040812080546001929061220c90849061381e565b90915550506001600160a01b038216600090815260036020526040812080546001929061223a9084906137f2565b909155505060008181526002602052604080822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600a80546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6123288484846120c3565b612334848484846125ef565b611c345760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610888565b6000818152600260205260409020546060906001600160a01b03166124335760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006064820152608401610888565b600061243d61279c565b9050600081511161245d5760405180602001604052806000815250611d53565b80612467846127ab565b604051602001611d43929190613480565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd00000000000000000000000000000000000000000000000000000000148061250b57507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061075b57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083161461075b565b61256583836128dd565b61257260008484846125ef565b6109da5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610888565b6109da838383612a43565b60006001600160a01b0384163b15612791576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a029061264c9033908990889088906004016134f0565b602060405180830381600087803b15801561266657600080fd5b505af1925050508015612696575060408051601f3d908101601f1916820190925261269391810190612faa565b60015b612746573d8080156126c4576040519150601f19603f3d011682016040523d82523d6000602084013e6126c9565b606091505b50805161273e5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610888565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a02000000000000000000000000000000000000000000000000000000001490506120bb565b506001949350505050565b6060600e805461077090613861565b6060816127eb57505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b811561281557806127ff816138b5565b915061280e9050600a8361380a565b91506127ef565b60008167ffffffffffffffff811115612830576128306139be565b6040519080825280601f01601f19166020018201604052801561285a576020820181803683370190505b5090505b84156120bb5761286f60018361381e565b915061287c600a866138ee565b6128879060306137f2565b60f81b81838151811061289c5761289c61398f565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506128d6600a8661380a565b945061285e565b6001600160a01b0382166129335760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610888565b6000818152600260205260409020546001600160a01b0316156129985760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610888565b6129a4600083836125e4565b6001600160a01b03821660009081526003602052604081208054600192906129cd9084906137f2565b909155505060008181526002602052604080822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160a01b038316612a9e57612a9981600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b612ac1565b816001600160a01b0316836001600160a01b031614612ac157612ac18382612afb565b6001600160a01b038216612ad8576109da81612b98565b826001600160a01b0316826001600160a01b0316146109da576109da8282612c47565b60006001612b088461133b565b612b12919061381e565b600083815260076020526040902054909150808214612b65576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090612baa9060019061381e565b60008381526009602052604081205460088054939450909284908110612bd257612bd261398f565b906000526020600020015490508060088381548110612bf357612bf361398f565b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480612c2b57612c2b613960565b6001900381819060005260206000200160009055905550505050565b6000612c528361133b565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b828054612c9790613861565b90600052602060002090601f016020900481019282612cb95760008555612d1d565b82601f10612cf0578280017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00823516178555612d1d565b82800160010185558215612d1d579182015b82811115612d1d578235825591602001919060010190612d02565b50612d29929150612da1565b5090565b828054612d3990613861565b90600052602060002090601f016020900481019282612d5b5760008555612d1d565b82601f10612d7457805160ff1916838001178555612d1d565b82800160010185558215612d1d579182015b82811115612d1d578251825591602001919060010190612d86565b5b80821115612d295760008155600101612da2565b80356001600160a01b03811681146111ac57600080fd5b600082601f830112612dde57600080fd5b8135612df1612dec826137ca565b613799565b818152846020838601011115612e0657600080fd5b816020850160208301376000918101602001919091529392505050565b803561ffff811681146111ac57600080fd5b600060208284031215612e4757600080fd5b611d5382612db6565b60008060408385031215612e6357600080fd5b612e6c83612db6565b9150612e7a60208401612db6565b90509250929050565b600080600060608486031215612e9857600080fd5b612ea184612db6565b9250612eaf60208501612db6565b9150604084013590509250925092565b60008060008060808587031215612ed557600080fd5b612ede85612db6565b9350612eec60208601612db6565b925060408501359150606085013567ffffffffffffffff811115612f0f57600080fd5b612f1b87828801612dcd565b91505092959194509250565b60008060408385031215612f3a57600080fd5b612f4383612db6565b915060208301358015158114612f5857600080fd5b809150509250929050565b60008060408385031215612f7657600080fd5b612f7f83612db6565b946020939093013593505050565b600060208284031215612f9f57600080fd5b8135611d53816139ed565b600060208284031215612fbc57600080fd5b8151611d53816139ed565b60008060208385031215612fda57600080fd5b823567ffffffffffffffff80821115612ff257600080fd5b818501915085601f83011261300657600080fd5b81358181111561301557600080fd5b86602082850101111561302757600080fd5b60209290920196919550909350505050565b60006020828403121561304b57600080fd5b813567ffffffffffffffff81111561306257600080fd5b6120bb84828501612dcd565b60006020828403121561308057600080fd5b815167ffffffffffffffff81111561309757600080fd5b8201601f810184136130a857600080fd5b80516130b6612dec826137ca565b8181528560208385010111156130cb57600080fd5b6130dc826020830160208601613835565b95945050505050565b6000602082840312156130f757600080fd5b5035919050565b6000806040838503121561311157600080fd5b82359150612e7a60208401612db6565b6000806040838503121561313457600080fd5b82359150602083013567ffffffffffffffff81111561315257600080fd5b61315e85828601612dcd565b9150509250929050565b60008060006060848603121561317d57600080fd5b83359250602084013567ffffffffffffffff8082111561319c57600080fd5b6131a887838801612dcd565b935060408601359150808211156131be57600080fd5b506131cb86828701612dcd565b9150509250925092565b600080600080608085870312156131eb57600080fd5b8435935067ffffffffffffffff806020870135111561320957600080fd5b6132198760208801358801612dcd565b9350806040870135111561322c57600080fd5b61323c8760408801358801612dcd565b9250806060870135111561324f57600080fd5b6060860135860187601f82011261326557600080fd5b8181351115613276576132766139be565b6132866020823560051b01613799565b8082358252602082019150602083018a6020853560051b86010111156132ab57600080fd5b60005b84358110156133435785823511156132c557600080fd5b813585016060601f19828f030112156132dd57600080fd5b6132e5613770565b6132f160208301612e23565b81526132ff60408301612e23565b6020820152876060830135111561331557600080fd5b6133288e60206060850135850101612dcd565b604082015285525060209384019391909101906001016132ae565b50508094505050505092959194509250565b6000815180845261336d816020860160208601613835565b601f01601f19169290920160200192915050565b8054600090600181811c908083168061339b57607f831692505b60208084108214156133d6577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b838852602088018280156133f157600181146134205761344b565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0087168252828201975061344b565b60008981526020902060005b878110156134455781548482015290860190840161342c565b83019850505b5050505050505092915050565b60408252600061346b6040840183613381565b83810360208501526120bb8160018501613381565b60008351613492818460208801613835565b8351908301906134a6818360208801613835565b01949350505050565b600082516134c1818460208701613835565b7f2e6a736f6e000000000000000000000000000000000000000000000000000000920191825250600501919050565b60006001600160a01b038087168352808616602084015250836040830152608060608301526135226080830184613355565b9695505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561356457835183529284019291840191600101613548565b50909695505050505050565b602081526000611d536020830184613355565b600060208083528351606080838601526135a06080860183613355565b915082860151601f1960408188860301818901526135be8584613355565b898201518982038401868b015280518083529196508701935086860190600581901b8701880160005b8281101561363357888203860184528651805161ffff90811684528b820151168b84015285015185830189905261362089840182613355565b978b0197948b01949250506001016135e7565b509b9a5050505050505050505050565b600060408083526060808285015261365e60a0850187613381565b60017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc080878403018488015261369683838b01613381565b878103909101608088015260028981018054808452600091825260208083209496508087019492600583901b88018201905b8381101561371357601f19898303018752845461ffff8082168452808260101c16858501525050898b8301526137028a8301898701613381565b9683019694860194915087016136c8565b508b8103828d0152613725818e613458565b9e9d5050505050505050505050505050565b6020815260008251604060208401526137536060840182613355565b90506020840151601f198483030160408501526130dc8282613355565b6040516060810167ffffffffffffffff81118282101715613793576137936139be565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156137c2576137c26139be565b604052919050565b600067ffffffffffffffff8211156137e4576137e46139be565b50601f01601f191660200190565b6000821982111561380557613805613902565b500190565b60008261381957613819613931565b500490565b60008282101561383057613830613902565b500390565b60005b83811015613850578181015183820152602001613838565b83811115611c345750506000910152565b600181811c9082168061387557607f821691505b602082108114156138af577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156138e7576138e7613902565b5060010190565b6000826138fd576138fd613931565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7fffffffff0000000000000000000000000000000000000000000000000000000081168114610af857600080fdfea2646970667358221220c766546cbc112335d3ba8dbb12f59c766df285835c7a1af3bc705607e8bdadff64736f6c63430008060033",
  "deployedBytecode": "0x6080604052600436106102855760003560e01c80636c0360eb11610153578063a574cea4116100cb578063c87b56dd1161007f578063e0c9fbc711610064578063e0c9fbc7146106d2578063e985e9c5146106e7578063f2fde38b1461073057600080fd5b8063c87b56dd1461069d578063daa023aa146106bd57600080fd5b8063b0e1d7f3116100b0578063b0e1d7f31461063d578063b419a1161461065d578063b88d4fde1461067d57600080fd5b8063a574cea4146105f0578063afa8ee1d1461061d57600080fd5b80638da5cb5b1161012257806395d89b411161010757806395d89b41146105a657806398d5fdca146105bb578063a22cb465146105d057600080fd5b80638da5cb5b1461056857806391b7f5ed1461058657600080fd5b80636c0360eb146104f157806370a0823114610506578063715018a6146105265780638462151c1461053b57600080fd5b8063261aff4111610201578063489b13ba116101b5578063512379d81161019a578063512379d81461048457806355f804b3146104b15780636352211e146104d157600080fd5b8063489b13ba146104445780634f6ccce71461046457600080fd5b80632f745c59116101e65780632f745c59146103ef57806332cb6b0c1461040f57806342842e0e1461042457600080fd5b8063261aff41146103af5780632b88c5af146103cf57600080fd5b8063095ea7b31161025857806318160ddd1161023d57806318160ddd146103585780631c8b232d1461037757806323b872dd1461038f57600080fd5b8063095ea7b31461032e5780631249c58b1461035057600080fd5b806301ffc9a71461028a57806305957706146102bf57806306fdde03146102e1578063081812fc146102f6575b600080fd5b34801561029657600080fd5b506102aa6102a5366004612f8d565b610750565b60405190151581526020015b60405180910390f35b3480156102cb57600080fd5b506102d4610761565b6040516102b69190613570565b3480156102ed57600080fd5b506102d46107f3565b34801561030257600080fd5b506103166103113660046130e5565b610802565b6040516001600160a01b0390911681526020016102b6565b34801561033a57600080fd5b5061034e610349366004612f63565b6108ad565b005b61034e6109df565b34801561036457600080fd5b506008545b6040519081526020016102b6565b34801561038357600080fd5b50600d5460ff166102aa565b34801561039b57600080fd5b5061034e6103aa366004612e83565b610afb565b3480156103bb57600080fd5b506102d46103ca3660046130e5565b610b82565b3480156103db57600080fd5b5061034e6103ea366004612fc7565b610c28565b3480156103fb57600080fd5b5061036961040a366004612f63565b610c8e565b34801561041b57600080fd5b5061036960ca81565b34801561043057600080fd5b5061034e61043f366004612e83565b610d36565b34801561045057600080fd5b5061034e61045f3660046131d5565b610d51565b34801561047057600080fd5b5061036961047f3660046130e5565b610f01565b34801561049057600080fd5b506104a461049f3660046130e5565b610fa5565b6040516102b69190613737565b3480156104bd57600080fd5b5061034e6104cc366004613039565b6111b1565b3480156104dd57600080fd5b506103166104ec3660046130e5565b611222565b3480156104fd57600080fd5b506102d46112ad565b34801561051257600080fd5b50610369610521366004612e35565b61133b565b34801561053257600080fd5b5061034e6113d5565b34801561054757600080fd5b5061055b610556366004612e35565b61143b565b6040516102b6919061352c565b34801561057457600080fd5b50600a546001600160a01b0316610316565b34801561059257600080fd5b5061034e6105a13660046130e5565b6114dd565b3480156105b257600080fd5b506102d461153c565b3480156105c757600080fd5b50600b54610369565b3480156105dc57600080fd5b5061034e6105eb366004612f27565b61154b565b3480156105fc57600080fd5b5061061061060b3660046130e5565b61162e565b6040516102b69190613583565b34801561062957600080fd5b5061034e610638366004613168565b61195a565b34801561064957600080fd5b5061034e6106583660046130fe565b611a04565b34801561066957600080fd5b5061034e610678366004613121565b611b2a565b34801561068957600080fd5b5061034e610698366004612ebf565b611bac565b3480156106a957600080fd5b506102d46106b83660046130e5565b611c3a565b3480156106c957600080fd5b50600c54610369565b3480156106de57600080fd5b5061034e611d5a565b3480156106f357600080fd5b506102aa610702366004612e50565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561073c57600080fd5b5061034e61074b366004612e35565b611de6565b600061075b82611ec5565b92915050565b6060600f805461077090613861565b80601f016020809104026020016040519081016040528092919081815260200182805461079c90613861565b80156107e95780601f106107be576101008083540402835291602001916107e9565b820191906000526020600020905b8154815290600101906020018083116107cc57829003601f168201915b5050505050905090565b60606000805461077090613861565b6000818152600260205260408120546001600160a01b03166108915760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e000000000000000000000000000000000000000060648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006108b882611222565b9050806001600160a01b0316836001600160a01b031614156109425760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610888565b336001600160a01b038216148061095e575061095e8133610702565b6109d05760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610888565b6109da8383611f1b565b505050565b600d5460ff16610a315760405162461bcd60e51b815260206004820152601f60248201527f5072696d6172792073616c65206861736e2774207374617274656420796574006044820152606401610888565b6000610a3c60085490565b9050600c5460ca610a4d919061381e565b811115610a9c5760405162461bcd60e51b815260206004820152601460248201527f546f6b656e732061726520736f6c64206f7574210000000000000000000000006044820152606401610888565b34600b541115610aee5760405162461bcd60e51b815260206004820152601960248201527f496e636f6e73697374656e7420616d6f756e742073656e7421000000000000006044820152606401610888565b610af83382611fa1565b50565b610b053382611fbb565b610b775760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610888565b6109da8383836120c3565b606060108260ca8110610b9757610b9761398f565b018054610ba390613861565b80601f0160208091040260200160405190810160405280929190818152602001828054610bcf90613861565b8015610c1c5780601f10610bf157610100808354040283529160200191610c1c565b820191906000526020600020905b815481529060010190602001808311610bff57829003601f168201915b50505050509050919050565b600a546001600160a01b03163314610c825760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610888565b6109da600f8383612c8b565b6000610c998361133b565b8210610d0d5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e64730000000000000000000000000000000000000000006064820152608401610888565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6109da83838360405180602001604052806000815250611bac565b600a546001600160a01b03163314610dab5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610888565b600061026e8560ca8110610dc157610dc161398f565b60030201905083816000019080519060200190610ddf929190612d2d565b508251610df59060018301906020860190612d2d565b50600281015460005b8351811015610ef857818110610e1d5760028301805460010181556000525b6000836002018281548110610e3457610e3461398f565b906000526020600020906002020190506000858381518110610e5857610e5861398f565b60209081029190910181015180820151845461ffff90911662010000027fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000ffff90911617845560408101518051919350610eb7926001860192910190612d2d565b505181547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff90911617905580610ef0816138b5565b915050610dfe565b50505050505050565b6000610f0c60085490565b8210610f805760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e647300000000000000000000000000000000000000006064820152608401610888565b60088281548110610f9357610f9361398f565b90600052602060002001549050919050565b6040805180820190915260608082526020820152600a546001600160a01b031633146110135760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610888565b60ca82106110635760405162461bcd60e51b815260206004820152601060248201527f6964206f7574206f6620626f756e6473000000000000000000000000000000006044820152606401610888565b60da8260ca81106110765761107661398f565b6002020160405180604001604052908160008201805461109590613861565b80601f01602080910402602001604051908101604052809291908181526020018280546110c190613861565b801561110e5780601f106110e35761010080835404028352916020019161110e565b820191906000526020600020905b8154815290600101906020018083116110f157829003601f168201915b5050505050815260200160018201805461112790613861565b80601f016020809104026020016040519081016040528092919081815260200182805461115390613861565b80156111a05780601f10611175576101008083540402835291602001916111a0565b820191906000526020600020905b81548152906001019060200180831161118357829003601f168201915b50505050508152505090505b919050565b600a546001600160a01b0316331461120b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610888565b805161121e90600e906020840190612d2d565b5050565b6000818152600260205260408120546001600160a01b03168061075b5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e00000000000000000000000000000000000000000000006064820152608401610888565b600e80546112ba90613861565b80601f01602080910402602001604051908101604052809291908181526020018280546112e690613861565b80156113335780601f1061130857610100808354040283529160200191611333565b820191906000526020600020905b81548152906001019060200180831161131657829003601f168201915b505050505081565b60006001600160a01b0382166113b95760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f2061646472657373000000000000000000000000000000000000000000006064820152608401610888565b506001600160a01b031660009081526003602052604090205490565b600a546001600160a01b0316331461142f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610888565b61143960006122b3565b565b606060006114488361133b565b905060008167ffffffffffffffff811115611465576114656139be565b60405190808252806020026020018201604052801561148e578160200160208202803683370190505b50905060005b828110156114d5576114a68582610c8e565b8282815181106114b8576114b861398f565b6020908102919091010152806114cd816138b5565b915050611494565b509392505050565b600a546001600160a01b031633146115375760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610888565b600b55565b60606001805461077090613861565b6001600160a01b0382163314156115a45760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610888565b3360008181526005602090815260408083206001600160a01b0387168085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b61165260405180606001604052806060815260200160608152602001606081525090565b600a546001600160a01b031633146116ac5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610888565b60ca82106116fc5760405162461bcd60e51b815260206004820152601060248201527f6964206f7574206f6620626f756e6473000000000000000000000000000000006044820152606401610888565b61026e8260ca81106117105761171061398f565b6003020160405180606001604052908160008201805461172f90613861565b80601f016020809104026020016040519081016040528092919081815260200182805461175b90613861565b80156117a85780601f1061177d576101008083540402835291602001916117a8565b820191906000526020600020905b81548152906001019060200180831161178b57829003601f168201915b505050505081526020016001820180546117c190613861565b80601f01602080910402602001604051908101604052809291908181526020018280546117ed90613861565b801561183a5780601f1061180f5761010080835404028352916020019161183a565b820191906000526020600020905b81548152906001019060200180831161181d57829003601f168201915b5050505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b8282101561194c5760008481526020908190206040805160608101825260028602909201805461ffff8082168552620100009091041693830193909352600183018054929392918401916118bb90613861565b80601f01602080910402602001604051908101604052809291908181526020018280546118e790613861565b80156119345780601f1061190957610100808354040283529160200191611934565b820191906000526020600020905b81548152906001019060200180831161191757829003601f168201915b50505050508152505081526020019060010190611868565b505050915250909392505050565b600a546001600160a01b031633146119b45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610888565b600060da8460ca81106119c9576119c961398f565b600202019050828160000190805190602001906119e7929190612d2d565b5081516119fd9060018301906020850190612d2d565b5050505050565b600a546001600160a01b03163314611a5e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610888565b600c54821115611ad65760405162461bcd60e51b815260206004820152602360248201527f5468617420776f756c642065786365656420746865206d61782072657365727660448201527f65642e00000000000000000000000000000000000000000000000000000000006064820152608401610888565b6000611ae160085490565b905060005b83811015611b1357611b0183611afc83856137f2565b611fa1565b80611b0b816138b5565b915050611ae6565b5082600c54611b22919061381e565b600c55505050565b600a546001600160a01b03163314611b845760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610888565b8060108360ca8110611b9857611b9861398f565b0190805190602001906109da929190612d2d565b611bb63383611fbb565b611c285760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610888565b611c348484848461231d565b50505050565b600d54606090610100900460ff1615611d075773__$6ca4c9a272396ac50a3dff0df8f353fb3d$__63791b058761026e8460ca8110611c7b57611c7b61398f565b6003020160da8560ca8110611c9257611c9261398f565b600202016040518363ffffffff1660e01b8152600401611cb3929190613643565b60006040518083038186803b158015611ccb57600080fd5b505af4158015611cdf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261075b919081019061306e565b6000611d12836123a6565b90506000815111611d325760405180602001604052806000815250611d53565b80604051602001611d4391906134af565b6040516020818303038152906040525b9392505050565b600a546001600160a01b03163314611db45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610888565b600d80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00811660ff90911615179055565b600a546001600160a01b03163314611e405760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610888565b6001600160a01b038116611ebc5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610888565b610af8816122b3565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f780e9d6300000000000000000000000000000000000000000000000000000000148061075b575061075b82612478565b600081815260046020526040902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0384169081179091558190611f6882611222565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b61121e82826040518060200160405280600081525061255b565b6000818152600260205260408120546001600160a01b03166120455760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e00000000000000000000000000000000000000006064820152608401610888565b600061205083611222565b9050806001600160a01b0316846001600160a01b0316148061208b5750836001600160a01b031661208084610802565b6001600160a01b0316145b806120bb57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b03166120d682611222565b6001600160a01b0316146121525760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201527f73206e6f74206f776e00000000000000000000000000000000000000000000006064820152608401610888565b6001600160a01b0382166121cd5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610888565b6121d88383836125e4565b6121e3600082611f1b565b6001600160a01b038316600090815260036020526040812080546001929061220c90849061381e565b90915550506001600160a01b038216600090815260036020526040812080546001929061223a9084906137f2565b909155505060008181526002602052604080822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600a80546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6123288484846120c3565b612334848484846125ef565b611c345760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610888565b6000818152600260205260409020546060906001600160a01b03166124335760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006064820152608401610888565b600061243d61279c565b9050600081511161245d5760405180602001604052806000815250611d53565b80612467846127ab565b604051602001611d43929190613480565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd00000000000000000000000000000000000000000000000000000000148061250b57507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061075b57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083161461075b565b61256583836128dd565b61257260008484846125ef565b6109da5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610888565b6109da838383612a43565b60006001600160a01b0384163b15612791576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a029061264c9033908990889088906004016134f0565b602060405180830381600087803b15801561266657600080fd5b505af1925050508015612696575060408051601f3d908101601f1916820190925261269391810190612faa565b60015b612746573d8080156126c4576040519150601f19603f3d011682016040523d82523d6000602084013e6126c9565b606091505b50805161273e5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610888565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a02000000000000000000000000000000000000000000000000000000001490506120bb565b506001949350505050565b6060600e805461077090613861565b6060816127eb57505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b811561281557806127ff816138b5565b915061280e9050600a8361380a565b91506127ef565b60008167ffffffffffffffff811115612830576128306139be565b6040519080825280601f01601f19166020018201604052801561285a576020820181803683370190505b5090505b84156120bb5761286f60018361381e565b915061287c600a866138ee565b6128879060306137f2565b60f81b81838151811061289c5761289c61398f565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506128d6600a8661380a565b945061285e565b6001600160a01b0382166129335760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610888565b6000818152600260205260409020546001600160a01b0316156129985760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610888565b6129a4600083836125e4565b6001600160a01b03821660009081526003602052604081208054600192906129cd9084906137f2565b909155505060008181526002602052604080822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160a01b038316612a9e57612a9981600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b612ac1565b816001600160a01b0316836001600160a01b031614612ac157612ac18382612afb565b6001600160a01b038216612ad8576109da81612b98565b826001600160a01b0316826001600160a01b0316146109da576109da8282612c47565b60006001612b088461133b565b612b12919061381e565b600083815260076020526040902054909150808214612b65576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090612baa9060019061381e565b60008381526009602052604081205460088054939450909284908110612bd257612bd261398f565b906000526020600020015490508060088381548110612bf357612bf361398f565b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480612c2b57612c2b613960565b6001900381819060005260206000200160009055905550505050565b6000612c528361133b565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b828054612c9790613861565b90600052602060002090601f016020900481019282612cb95760008555612d1d565b82601f10612cf0578280017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00823516178555612d1d565b82800160010185558215612d1d579182015b82811115612d1d578235825591602001919060010190612d02565b50612d29929150612da1565b5090565b828054612d3990613861565b90600052602060002090601f016020900481019282612d5b5760008555612d1d565b82601f10612d7457805160ff1916838001178555612d1d565b82800160010185558215612d1d579182015b82811115612d1d578251825591602001919060010190612d86565b5b80821115612d295760008155600101612da2565b80356001600160a01b03811681146111ac57600080fd5b600082601f830112612dde57600080fd5b8135612df1612dec826137ca565b613799565b818152846020838601011115612e0657600080fd5b816020850160208301376000918101602001919091529392505050565b803561ffff811681146111ac57600080fd5b600060208284031215612e4757600080fd5b611d5382612db6565b60008060408385031215612e6357600080fd5b612e6c83612db6565b9150612e7a60208401612db6565b90509250929050565b600080600060608486031215612e9857600080fd5b612ea184612db6565b9250612eaf60208501612db6565b9150604084013590509250925092565b60008060008060808587031215612ed557600080fd5b612ede85612db6565b9350612eec60208601612db6565b925060408501359150606085013567ffffffffffffffff811115612f0f57600080fd5b612f1b87828801612dcd565b91505092959194509250565b60008060408385031215612f3a57600080fd5b612f4383612db6565b915060208301358015158114612f5857600080fd5b809150509250929050565b60008060408385031215612f7657600080fd5b612f7f83612db6565b946020939093013593505050565b600060208284031215612f9f57600080fd5b8135611d53816139ed565b600060208284031215612fbc57600080fd5b8151611d53816139ed565b60008060208385031215612fda57600080fd5b823567ffffffffffffffff80821115612ff257600080fd5b818501915085601f83011261300657600080fd5b81358181111561301557600080fd5b86602082850101111561302757600080fd5b60209290920196919550909350505050565b60006020828403121561304b57600080fd5b813567ffffffffffffffff81111561306257600080fd5b6120bb84828501612dcd565b60006020828403121561308057600080fd5b815167ffffffffffffffff81111561309757600080fd5b8201601f810184136130a857600080fd5b80516130b6612dec826137ca565b8181528560208385010111156130cb57600080fd5b6130dc826020830160208601613835565b95945050505050565b6000602082840312156130f757600080fd5b5035919050565b6000806040838503121561311157600080fd5b82359150612e7a60208401612db6565b6000806040838503121561313457600080fd5b82359150602083013567ffffffffffffffff81111561315257600080fd5b61315e85828601612dcd565b9150509250929050565b60008060006060848603121561317d57600080fd5b83359250602084013567ffffffffffffffff8082111561319c57600080fd5b6131a887838801612dcd565b935060408601359150808211156131be57600080fd5b506131cb86828701612dcd565b9150509250925092565b600080600080608085870312156131eb57600080fd5b8435935067ffffffffffffffff806020870135111561320957600080fd5b6132198760208801358801612dcd565b9350806040870135111561322c57600080fd5b61323c8760408801358801612dcd565b9250806060870135111561324f57600080fd5b6060860135860187601f82011261326557600080fd5b8181351115613276576132766139be565b6132866020823560051b01613799565b8082358252602082019150602083018a6020853560051b86010111156132ab57600080fd5b60005b84358110156133435785823511156132c557600080fd5b813585016060601f19828f030112156132dd57600080fd5b6132e5613770565b6132f160208301612e23565b81526132ff60408301612e23565b6020820152876060830135111561331557600080fd5b6133288e60206060850135850101612dcd565b604082015285525060209384019391909101906001016132ae565b50508094505050505092959194509250565b6000815180845261336d816020860160208601613835565b601f01601f19169290920160200192915050565b8054600090600181811c908083168061339b57607f831692505b60208084108214156133d6577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b838852602088018280156133f157600181146134205761344b565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0087168252828201975061344b565b60008981526020902060005b878110156134455781548482015290860190840161342c565b83019850505b5050505050505092915050565b60408252600061346b6040840183613381565b83810360208501526120bb8160018501613381565b60008351613492818460208801613835565b8351908301906134a6818360208801613835565b01949350505050565b600082516134c1818460208701613835565b7f2e6a736f6e000000000000000000000000000000000000000000000000000000920191825250600501919050565b60006001600160a01b038087168352808616602084015250836040830152608060608301526135226080830184613355565b9695505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561356457835183529284019291840191600101613548565b50909695505050505050565b602081526000611d536020830184613355565b600060208083528351606080838601526135a06080860183613355565b915082860151601f1960408188860301818901526135be8584613355565b898201518982038401868b015280518083529196508701935086860190600581901b8701880160005b8281101561363357888203860184528651805161ffff90811684528b820151168b84015285015185830189905261362089840182613355565b978b0197948b01949250506001016135e7565b509b9a5050505050505050505050565b600060408083526060808285015261365e60a0850187613381565b60017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc080878403018488015261369683838b01613381565b878103909101608088015260028981018054808452600091825260208083209496508087019492600583901b88018201905b8381101561371357601f19898303018752845461ffff8082168452808260101c16858501525050898b8301526137028a8301898701613381565b9683019694860194915087016136c8565b508b8103828d0152613725818e613458565b9e9d5050505050505050505050505050565b6020815260008251604060208401526137536060840182613355565b90506020840151601f198483030160408501526130dc8282613355565b6040516060810167ffffffffffffffff81118282101715613793576137936139be565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156137c2576137c26139be565b604052919050565b600067ffffffffffffffff8211156137e4576137e46139be565b50601f01601f191660200190565b6000821982111561380557613805613902565b500190565b60008261381957613819613931565b500490565b60008282101561383057613830613902565b500390565b60005b83811015613850578181015183820152602001613838565b83811115611c345750506000910152565b600181811c9082168061387557607f821691505b602082108114156138af577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156138e7576138e7613902565b5060010190565b6000826138fd576138fd613931565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7fffffffff0000000000000000000000000000000000000000000000000000000081168114610af857600080fdfea2646970667358221220c766546cbc112335d3ba8dbb12f59c766df285835c7a1af3bc705607e8bdadff64736f6c63430008060033",
  "libraries": {
    "LeniaDescriptor": "0x4Bbbd491a058F4b0AFe3FcB597d9F68a035D433b"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 129,
        "contract": "contracts/Lenia.sol:Lenia",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 131,
        "contract": "contracts/Lenia.sol:Lenia",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 135,
        "contract": "contracts/Lenia.sol:Lenia",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 139,
        "contract": "contracts/Lenia.sol:Lenia",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 143,
        "contract": "contracts/Lenia.sol:Lenia",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 149,
        "contract": "contracts/Lenia.sol:Lenia",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1068,
        "contract": "contracts/Lenia.sol:Lenia",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1072,
        "contract": "contracts/Lenia.sol:Lenia",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1075,
        "contract": "contracts/Lenia.sol:Lenia",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1079,
        "contract": "contracts/Lenia.sol:Lenia",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7,
        "contract": "contracts/Lenia.sol:Lenia",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 2339,
        "contract": "contracts/Lenia.sol:Lenia",
        "label": "_price",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 2342,
        "contract": "contracts/Lenia.sol:Lenia",
        "label": "_reserved",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 2344,
        "contract": "contracts/Lenia.sol:Lenia",
        "label": "_hasSaleStarted",
        "offset": 0,
        "slot": "13",
        "type": "t_bool"
      },
      {
        "astId": 2347,
        "contract": "contracts/Lenia.sol:Lenia",
        "label": "switchToOnChain",
        "offset": 1,
        "slot": "13",
        "type": "t_bool"
      },
      {
        "astId": 2349,
        "contract": "contracts/Lenia.sol:Lenia",
        "label": "baseURI",
        "offset": 0,
        "slot": "14",
        "type": "t_string_storage"
      },
      {
        "astId": 2351,
        "contract": "contracts/Lenia.sol:Lenia",
        "label": "engine",
        "offset": 0,
        "slot": "15",
        "type": "t_string_storage"
      },
      {
        "astId": 2355,
        "contract": "contracts/Lenia.sol:Lenia",
        "label": "cells",
        "offset": 0,
        "slot": "16",
        "type": "t_array(t_bytes_storage)202_storage"
      },
      {
        "astId": 2360,
        "contract": "contracts/Lenia.sol:Lenia",
        "label": "leniaParams",
        "offset": 0,
        "slot": "218",
        "type": "t_array(t_struct(LeniaParams)2926_storage)202_storage"
      },
      {
        "astId": 2365,
        "contract": "contracts/Lenia.sol:Lenia",
        "label": "metadata",
        "offset": 0,
        "slot": "622",
        "type": "t_array(t_struct(LeniaMetadata)2935_storage)202_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes_storage)202_storage": {
        "base": "t_bytes_storage",
        "encoding": "inplace",
        "label": "bytes[202]",
        "numberOfBytes": "6464"
      },
      "t_array(t_struct(LeniaAttribute)2921_storage)dyn_storage": {
        "base": "t_struct(LeniaAttribute)2921_storage",
        "encoding": "dynamic_array",
        "label": "struct LeniaDescriptor.LeniaAttribute[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(LeniaMetadata)2935_storage)202_storage": {
        "base": "t_struct(LeniaMetadata)2935_storage",
        "encoding": "inplace",
        "label": "struct LeniaDescriptor.LeniaMetadata[202]",
        "numberOfBytes": "19392"
      },
      "t_array(t_struct(LeniaParams)2926_storage)202_storage": {
        "base": "t_struct(LeniaParams)2926_storage",
        "encoding": "inplace",
        "label": "struct LeniaDescriptor.LeniaParams[202]",
        "numberOfBytes": "12928"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(LeniaAttribute)2921_storage": {
        "encoding": "inplace",
        "label": "struct LeniaDescriptor.LeniaAttribute",
        "members": [
          {
            "astId": 2916,
            "contract": "contracts/Lenia.sol:Lenia",
            "label": "traitType",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 2918,
            "contract": "contracts/Lenia.sol:Lenia",
            "label": "value",
            "offset": 2,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 2920,
            "contract": "contracts/Lenia.sol:Lenia",
            "label": "numericalValue",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(LeniaMetadata)2935_storage": {
        "encoding": "inplace",
        "label": "struct LeniaDescriptor.LeniaMetadata",
        "members": [
          {
            "astId": 2928,
            "contract": "contracts/Lenia.sol:Lenia",
            "label": "paddedID",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 2930,
            "contract": "contracts/Lenia.sol:Lenia",
            "label": "imageURL",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2934,
            "contract": "contracts/Lenia.sol:Lenia",
            "label": "leniaAttributes",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_struct(LeniaAttribute)2921_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(LeniaParams)2926_storage": {
        "encoding": "inplace",
        "label": "struct LeniaDescriptor.LeniaParams",
        "members": [
          {
            "astId": 2923,
            "contract": "contracts/Lenia.sol:Lenia",
            "label": "m",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 2925,
            "contract": "contracts/Lenia.sol:Lenia",
            "label": "s",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}