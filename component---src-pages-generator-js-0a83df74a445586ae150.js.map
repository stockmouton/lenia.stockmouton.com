{"version":3,"file":"component---src-pages-generator-js-0a83df74a445586ae150.js","mappings":"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","sources":["webpack://lenia.stockmouton.com/./src/engine.js","webpack://lenia.stockmouton.com/./src/components/generator.js","webpack://lenia.stockmouton.com/./src/pages/generator.js"],"sourcesContent":["(() => {\n    // Most problematic functions: FFT1D, transpose2D, complexMatrixDot\n    // Those are problematic because they are called all the time\n\n    ///////////////////////////////\n    // Globals\n    ///////////////////////////////\n    let ADD_LENIA = false;\n    let INIT_CELLS; \n    let INIT_CELLS_X = 0; \n    let INIT_CELLS_Y = 0;\n\n    let CANVAS_CELLS = null;\n    let RENDERING_CANVAS = null;\n    const CANVAS_SCALING = 2. \n    \n    const BUFFER_CELLS_IDX = 0;\n    const BUFFER_CELLS_OLD_IDX = 1;\n    const BUFFER_CELLS_IMAG_IDX = 2;\n    const BUFFER_FIELD_IDX = 3;\n    const BUFFER_POTENTIAL_REAL_IDX = 4;\n    const BUFFER_POTENTIAL_IMAG_IDX = 5;\n    const BUFFER_KERNEL_REAL_IDX = 6;\n    const BUFFER_KERNEL_IMAG_IDX = 7;\n    const BUFFER_CELLS_OUT_IDX = 8;\n    const BUFFER_TABLES_IDX = 9;\n    \n    let SCALE;\n    let WORLD_SIZE = 1;\n    let BUFFER_SIZE = 1;\n    let PIXEL_SIZE = 1;\n    let CANVAS_SIZE = 1;\n\n    ///////////////////////////////\n    // Loader\n    ///////////////////////////////\n    let exportsUpdateFn;\n    function init(metadata, zoom=1, fps=30) {\n        zoom = parseInt(Math.min(Math.max(zoom - 1, 0), 5), 10);\n        PIXEL_SIZE = 1 << zoom;\n        \n        metadata[\"config\"][\"world_params\"][\"scale\"] = parseInt(Math.min(Math.max(metadata[\"config\"][\"world_params\"][\"scale\"], 1), 4), 10);\n\n        const memory = createWASMMemory(metadata[\"config\"][\"world_params\"][\"scale\"])\n        const wasmConfig = {\n            env: {\n                memory\n            },\n            engine: {  // Name of the file\n                GF_ID       : metadata[\"config\"][\"kernels_params\"][0][\"gf_id\"],\n                GF_M        : metadata[\"config\"][\"kernels_params\"][0][\"m\"],\n                GF_S        : metadata[\"config\"][\"kernels_params\"][0][\"s\"],\n                T           : metadata[\"config\"][\"world_params\"][\"T\"],\n            },\n            Math\n        };\n        const wasmFilename = '/optimized.wasm';\n        WebAssembly.instantiateStreaming(fetch(wasmFilename), wasmConfig)\n        // WebAssembly.instantiateStreaming(fetch('untouched.wasm'), wasmConfig)\n            .then( ({ instance }) => {\n                exports = instance.exports\n\n                exportsUpdateFn = exports.updateFn\n                let buffer = new Float32Array(memory.buffer);\n\n                initWithProgressiveScaling(buffer, metadata, exports)\n\n                update(buffer, fps);\n                render(buffer, metadata[\"attributes\"])\n\n                setListener(buffer)\n            })\n            .catch( (error) => {\n                console.log(error);\n            });\n    }\n\n    function initWithProgressiveScaling(buffer, metadata, exports) {\n        const config = metadata[\"config\"]\n\n        let R = config[\"world_params\"][\"R\"];\n\n        SCALE = 1.\n        let cellsSt = config[\"cells\"];\n        let initCells = decompressArray(cellsSt);\n        let initDone = false\n        let scale = config[\"world_params\"][\"scale\"]\n        while (scale > 1 || !initDone) {\n            initDone = true\n            let currentScale = Math.min(scale, 2.)\n\n            setGlobals(SCALE * currentScale)\n            exports.setWorldSize(WORLD_SIZE)\n\n            R = Math.round(R * currentScale);\n            setKernel(buffer, exports.FFT2D, R, config[\"kernels_params\"]);\n\n            let x1 = Math.floor(WORLD_SIZE / 2 - (initCells.shape[2] / 2) * currentScale);\n            let y1 = Math.floor(WORLD_SIZE / 2 - (initCells.shape[1] / 2) * currentScale);\n            const angle = 0;\n            clearCells(buffer, 0)\n            copyInitCells(buffer, initCells, x1, y1, currentScale, angle);\n\n            const nbStepsForStabilization = 20;\n            for (let index = 0; index < nbStepsForStabilization; index++) {\n                buffer.copyWithin(\n                    BUFFER_CELLS_IDX * BUFFER_SIZE, // dest\n                    BUFFER_CELLS_OUT_IDX * BUFFER_SIZE,  // src\n                    (BUFFER_CELLS_OUT_IDX + 1) * BUFFER_SIZE\n                );\n                exportsUpdateFn()\n            }\n            initCells = crop(buffer)\n            scale /= currentScale\n        }\n\n        INIT_CELLS = initCells\n    }\n\n    function setListener(buffer){\n        document.body.addEventListener(\"keydown\", (e) => {\n            if (e.keyCode == 32) {\n                clearCells(buffer, 0);\n            }\n        });\n        document.getElementById(\"RENDERING_CANVAS\").addEventListener(\"click\", onClick);\n    }\n\n    function decompressArray(string_cells) {\n        const nbChars = ord(\"Z\") - ord(\"A\") + (ord(\"z\") - ord(\"a\")) + (ord(\"þ\") - ord(\"À\"));\n\n        let string_array = string_cells.split(\"::\");\n\n        console.assert(\n            string_array.length == 2 && string_array[0].length % 2 == 0\n        );\n\n        let max_val = nbChars ** 2 - 1;\n        let raw_shape = string_array[1].split(\";\");\n        let cells_shape = [];\n        for (let index = 0; index < raw_shape.length; index++) {\n            cells_shape.push(parseInt(raw_shape[index], 10));\n        }\n        let cells_val_l = [];\n        for (let index = 0; index < string_array[0].length; index += 2) {\n            let val_i = ch2val(\n                string_array[0][index] + string_array[0][index + 1],\n                nbChars\n            );\n            let val_f = val_i / max_val;\n            cells_val_l.push(val_f);\n        }\n        let cellsMat = createMat(cells_val_l, cells_shape);\n\n        return cellsMat;\n    }\n\n    function ch2val(c, nbChars) {\n        console.assert(c.length == 2);\n\n        let first_char = c[0];\n        let second_char = c[1];\n\n        let first_char_idx;\n        let second_char_idx;\n        if (ord(first_char) >= ord(\"À\")) {\n            first_char_idx =\n                ord(first_char) -\n                ord(\"À\") +\n                (ord(\"Z\") - ord(\"A\")) +\n                (ord(\"z\") - ord(\"a\"));\n        } else if (ord(first_char) >= ord(\"a\")) {\n            first_char_idx = ord(first_char) - ord(\"a\") + (ord(\"Z\") - ord(\"A\"));\n        } else {\n            first_char_idx = ord(first_char) - ord(\"A\");\n        }\n\n        if (ord(second_char) >= ord(\"À\")) {\n            second_char_idx =\n                ord(second_char) -\n                ord(\"À\") +\n                (ord(\"Z\") - ord(\"A\")) +\n                (ord(\"z\") - ord(\"a\"));\n        } else if (ord(second_char) >= ord(\"a\")) {\n            second_char_idx =\n                ord(second_char) - ord(\"a\") + (ord(\"Z\") - ord(\"A\"));\n        } else {\n            second_char_idx = ord(second_char) - ord(\"A\");\n        }\n\n        return first_char_idx * nbChars + second_char_idx;\n    }\n\n    function createMat(flat_data, shape) {\n        console.assert(shape.length == 3);\n\n        let nb_channels = shape[0];\n        let nb_rows = shape[1];\n        let nb_cols = shape[2];\n\n        let arr = new Array(nb_channels);\n        for (let i = 0; i < nb_channels; i++) {\n            let channel = new Array(nb_rows);\n            for (let j = 0; j < nb_rows; j++) {\n                let row = new Float32Array(nb_cols);\n                for (let k = 0; k < nb_cols; k++) {\n                    row[k] =\n                        flat_data[i * (nb_rows + nb_cols) + j * nb_cols + k];\n                }\n                channel[j] = row;\n            }\n            arr[i] = channel;\n        }\n\n        let arr_data = {\n            arr: arr,\n            shape: shape,\n        };\n        return arr_data;\n    }\n\n    function createDataArray(world_size) {\n        let arr = Array(world_size);\n        for (let i = 0; i < world_size; i++)\n            arr[i] = new Float32Array(world_size).fill(0);\n        return arr;\n    }\n\n    function InitCanvas(id, canvas_size) {\n        let canvas;\n        if (id == null){\n            canvas = document.createElement('canvas');\n        } else {\n            canvas = document.getElementById(id);\n        }\n        canvas.width = canvas.height = canvas_size;\n        let ctx = canvas.getContext(\"2d\");\n        let img = ctx.createImageData(canvas.width, canvas.height);\n        let rect = canvas.getBoundingClientRect();\n\n        return {\n            can: canvas,\n            ctx: ctx,\n            img: img,\n            left: rect.left,\n            top: rect.top,\n        };\n    }\n\n    function copyInitCells(buffer, newCells, x1, y1, scale, angle) {\n        let arr = newCells.arr[0];\n        let h = newCells.shape[1];\n        let w = newCells.shape[2];\n\n        let sin = Math.sin((angle / 180) * Math.PI);\n        let cos = Math.cos((angle / 180) * Math.PI);\n        let fh = (Math.abs(h * cos) + Math.abs(w * sin) + 1) * scale - 1;\n        let fw = (Math.abs(w * cos) + Math.abs(h * sin) + 1) * scale - 1;\n        for (let fi = 0; fi < fh; fi++) {\n            for (let fj = 0; fj < fw; fj++) {\n                let i = Math.round(\n                    (-(fj - fw / 2) * sin + (fi - fh / 2) * cos) / scale + h / 2\n                );\n                let j = Math.round(\n                    (+(fj - fw / 2) * cos + (fi - fh / 2) * sin) / scale + w / 2\n                );\n                let x = Mod(fj + x1, WORLD_SIZE);\n                let y = Mod(fi + y1, WORLD_SIZE);\n\n                let inBounds = (i >= 0 && j >= 0 && i < h && j < arr[i].length)\n                let c = inBounds ? arr[i][j] : 0.;\n                if (c > 0) {\n                    buffer[BUFFER_CELLS_OUT_IDX * BUFFER_SIZE + y * WORLD_SIZE + x] = c\n                };\n            }\n        }\n    }\n\n    ///////////////////////////////\n    // Renderer\n    ///////////////////////////////\n    function update(buffer, fps) {\n        (function loop() {\n            setTimeout(loop, 1000 / fps);\n            \n            buffer.copyWithin(\n                BUFFER_CELLS_IDX * BUFFER_SIZE, // dest\n                BUFFER_CELLS_OUT_IDX * BUFFER_SIZE,  // src\n                (BUFFER_CELLS_OUT_IDX + 1) * BUFFER_SIZE\n            );\n            exportsUpdateFn()\n\n            if (ADD_LENIA) {\n                const x1 = Math.floor(\n                    INIT_CELLS_X / PIXEL_SIZE - (INIT_CELLS.shape[2] / 2) / SCALE\n                );\n                const y1 = Math.floor(\n                    INIT_CELLS_Y / PIXEL_SIZE - (INIT_CELLS.shape[1] / 2) / SCALE\n                );\n                copyInitCells(buffer, INIT_CELLS, x1, y1, 1, 0);\n\n                ADD_LENIA = false;\n            }\n        })();\n    }\n\n    function render(buffer, attributes) {\n        let colorName;\n        for (let index = 0; index < attributes.length; index++) {\n            const attribute = attributes[index];\n            if (attribute[\"trait_type\"] === \"Colormap\") {\n                colorName = attribute[\"value\"]\n                    .trim()\n                    .toLocaleLowerCase()\n                    .replace(\" \", \"-\");\n            }\n        }\n        (function loop() {\n            window.requestAnimationFrame(loop);\n            DrawArray(CANVAS_CELLS, buffer, 1, colorName);\n        })();\n    }\n\n    function DrawArray(canvas, buffer, max_val, colorName) {\n        const nb_colors = COLORS[colorName].length;\n        let buf = canvas.img.data;\n\n        let p = 0;\n        let rgba;\n        for (let i = 0; i < CANVAS_SIZE; i++) {\n            let ii = Math.floor(i / PIXEL_SIZE);\n            for (let j = 0; j < CANVAS_SIZE; j++) {\n                let jj = Math.floor(j / PIXEL_SIZE);\n                let outBufPos = BUFFER_CELLS_OUT_IDX * BUFFER_SIZE + ii * WORLD_SIZE + jj;\n\n                let v = buffer[outBufPos] * max_val;\n                let c = Math.floor(v * nb_colors);\n                c = Math.max(c, 0);\n                c = Math.min(c, nb_colors - 1);\n                rgba = COLORS[colorName][c];\n\n                for (let n = 0; n < 3; n++) {\n                    buf[p++] = rgba[n];\n                }\n                buf[p++] = 255;\n            }\n        }\n\n        canvas.ctx.putImageData(canvas.img, 0, 0);\n        RENDERING_CANVAS.ctx.drawImage(canvas.can, 0, 0);\n    }\n\n    ///////////////////////////////\n    // Kernels\n    ///////////////////////////////\n    function setKernel(buffer, fft2dFn, R, kernels_params) {\n        let k_id = kernels_params[0][\"k_id\"];\n        let k_q = kernels_params[0][\"q\"];\n        let k_r = kernels_params[0][\"r\"];\n        let tmp_bs = kernels_params[0][\"b\"];\n        let bs;\n\n        let kernelRe = createDataArray(WORLD_SIZE);\n        if (typeof tmp_bs == \"string\") {\n            bs = [];\n            let tmp_bs_arr = tmp_bs.split(\",\");\n            for (let index = 0; index < tmp_bs_arr.length; index++) {\n                const split = tmp_bs_arr[index].split(\"/\");\n                if (split.length == 2) {\n                    bs.push(parseInt(split[0], 10) / parseInt(split[1], 10));\n                } else {\n                    bs.push(parseFloat(split[0]));\n                }\n            }\n        } else {\n            bs = kernels_params[0][\"b\"];\n        }\n\n        let weight = 0.0;\n        const world_size_center = WORLD_SIZE / 2;\n        for (let i = 0; i < WORLD_SIZE; i++) {\n            for (let j = 0; j < WORLD_SIZE; j++) {\n                let ii =\n                    ((i + world_size_center) % WORLD_SIZE) - world_size_center;\n                let jj =\n                    ((j + world_size_center) % WORLD_SIZE) - world_size_center;\n                let r = Math.sqrt(ii * ii + jj * jj) / R;\n                let v = kernelShell(k_id, k_q, bs, k_r, r);\n                weight += v;\n                kernelRe[i][j] = v;\n                ii = WORLD_SIZE - ((i + WORLD_SIZE / 2) % WORLD_SIZE) - 1;\n                jj = (j + WORLD_SIZE / 2) % WORLD_SIZE;\n            }\n        }\n\n        for (let i = 0; i < WORLD_SIZE; i++) {\n            for (let j = 0; j < WORLD_SIZE; j++) {\n                kernelRe[i][j] /= weight;\n            }\n        }\n\n        \n        for (let rowIdx = 0; rowIdx < WORLD_SIZE; rowIdx++) {\n            buffer.set(kernelRe[rowIdx], BUFFER_KERNEL_REAL_IDX * BUFFER_SIZE + rowIdx * WORLD_SIZE);\n            const tmpArr = new Float32Array(WORLD_SIZE).fill(0)\n            buffer.set(tmpArr, BUFFER_KERNEL_IMAG_IDX * BUFFER_SIZE + rowIdx * WORLD_SIZE);\n        }\n        fft2dFn(1, BUFFER_KERNEL_REAL_IDX, BUFFER_KERNEL_IMAG_IDX)\n    }\n\n    function kernelShell(k_id, k_q, bs, k_r, dist) {\n        let nb_b = bs.length;\n        let b_dist = nb_b * dist;\n        let b_threshold =\n            bs[Math.min(parseInt(Math.floor(b_dist), 10), nb_b - 1)];\n\n        let k_val = (dist < 1) * kernelFn(k_id, k_q, b_dist % 1) * b_threshold;\n\n        return k_val;\n    }\n\n    function kernelFn(k_id, k_q, x) {\n        let out;\n        switch (k_id) {\n            case 0:\n                return (4 * x * (1 - x)) ** k_q;\n            case 1:\n                out = k_q - 1 / (x * (1 - x));\n                return Math.exp(k_q * out);\n            case 2:\n                return x >= k_q && x <= 1 - k_q ? 1 : 0;\n            case 3:\n                return (x >= k_q && x <= 1 - k_q ? 1 : 0) + (x < k_q) * 0.5;\n            case 4:\n                out = ((x - k_q) / (0.3 * k_q)) ** 2;\n                return Math.exp(-out / 2);\n        }\n    }\n\n    ///////////////////////////\n    // Math\n    ///////////////////////////\n    function Mod(x, n) {\n        return ((x % n) + n) % n;\n    }\n    function Random() {\n        return genrand_real2();\n    }\n    function RandomInt(min, max) {\n        return Math.floor(Random() * (max + 1 - min) + min);\n    }\n\n    ///////////////////////////\n    // Utils\n    ///////////////////////////\n    function setGlobals(scale) {\n        SCALE = parseInt(Math.min(Math.max(scale, 1), 4), 10);\n        WORLD_SIZE = computeWorldSize(SCALE);\n        BUFFER_SIZE = WORLD_SIZE**2;\n        CANVAS_SIZE = Math.round(WORLD_SIZE * PIXEL_SIZE);\n\n        CANVAS_CELLS = InitCanvas(null, CANVAS_SIZE);\n        RENDERING_CANVAS = InitCanvas(\"RENDERING_CANVAS\", CANVAS_SIZE * CANVAS_SCALING)\n        RENDERING_CANVAS.ctx.scale(CANVAS_SCALING, CANVAS_SCALING)\n    }\n\n    function createWASMMemory(scale){\n        const worldSize = computeWorldSize(scale)\n        const bufferSize = worldSize**2\n\n        const nb_buffers = 9 + 1; // 9 image buffers + 1 table buffer\n        const byteSize = (bufferSize * nb_buffers) << 2;\n        const nb_pages = ((byteSize + 0xffff) & ~0xffff) >>> 16;\n        // Shared memory does not work on Safari\n        // Shared memory are needed for workers\n        // but you need some fancy CORS configuration to make it work.\n        // Overall, it's probably better to look at GPU support.\n        return new WebAssembly.Memory({\n            initial: nb_pages,\n            // maximum: nb_pages,\n            // shared: true\n        });\n    }\n    \n    function computeWorldSize(scale) {\n        let size_power2;\n        if (scale <= 1) {\n            size_power2 = 7;\n        } else if (scale <= 2) {\n            size_power2 = 8;\n        } else {\n            size_power2 = 9;\n        }\n\n        return 1 << size_power2\n    }\n\n    function ord(letter) {\n        return letter.charCodeAt(0);\n    }\n\n    function chr(code) {\n        return String.fromCharCode(code);\n    }\n\n    function clearCells(buffer, x) {\n        for (let i = 0; i < WORLD_SIZE; i++) {\n            for (let j = 0; j < WORLD_SIZE; j++) {\n                buffer[BUFFER_CELLS_OUT_IDX * BUFFER_SIZE + i * WORLD_SIZE + j] = x;\n            }\n        }\n    }\n\n    function crop(buffer){\n        let bounds = {'x': WORLD_SIZE, 'y': WORLD_SIZE, 'xm': 0, 'ym': 0}\n        for (let y = 0; y < WORLD_SIZE; y++) {\n            for (let x = 0; x < WORLD_SIZE; x++) {\n                let v = buffer[BUFFER_CELLS_OUT_IDX * BUFFER_SIZE + y * WORLD_SIZE + x]\n                if(v > 0) {\n                    bounds.x = Math.min(x, bounds.x)\n                    bounds.y = Math.min(y, bounds.y)\n                    bounds.xm = Math.max(x, bounds.xm)\n                    bounds.ym = Math.max(y, bounds.ym)\n                }\n            }\n        }\n        let cells = {\n            \"arr\": [[]],\n            \"shape\": [1, bounds.ym - bounds.y, bounds.xm - bounds.x]\n        } \n\n        for (let y = bounds.y; y < bounds.ym; y++) {\n            let subarray = new Float32Array(cells.shape[2])\n            for (let x = bounds.x, i = 0; x < bounds.xm; x++, i++) {\n                subarray[i] = buffer[BUFFER_CELLS_OUT_IDX * BUFFER_SIZE + y * WORLD_SIZE + x]\n            }\n            cells.arr[0].push(subarray)\n        }\n        \n        return cells\n    }\n\n    function onClick(e) {\n        let rect = e.target.getBoundingClientRect();\n        INIT_CELLS_X = (e.clientX - rect.left) / CANVAS_SCALING; //x position within the element.\n        INIT_CELLS_Y = (e.clientY - rect.top) / CANVAS_SCALING;  //y position within the element.\n        ADD_LENIA = true;\n    }\n\n    ///////////////////////////\n    // Colors\n    ///////////////////////////\n    const COLORS = {\n        alizarin: hex_to_palette_rgba(\"d6c3c9\", [\n            \"f9c784\",\n            \"e7e7e7\",\n            \"485696\",\n            \"19180a\",\n            \"3f220f\",\n            \"772014\",\n            \"af4319\",\n            \"e71d36\",\n        ]),\n        \"black-white\": hex_to_palette_rgba(\"000000\", [\n            \"1f2123\",\n            \"393b41\",\n            \"555860\",\n            \"737780\",\n            \"9497a1\",\n            \"b6b9c1\",\n            \"d9dbe1\",\n            \"ffffff\",\n        ]),\n        \"carmine-blue\": hex_to_palette_rgba(\"#006eb8\", [\n            \"#006eb8\",\n            \"#fff200\",\n            \"#cc1236\",\n        ]),\n        cinnamon: hex_to_palette_rgba(\"#a7d4e4\", [\n            \"#a7d4e4\",\n            \"#71502f\",\n            \"#fdc57e\",\n        ]),\n        city: hex_to_palette_rgba(\"F93943\", [\n            \"23005c\",\n            \"3a0099\",\n            \"66daff\",\n            \"e6f9ff\",\n            \"004b63\",\n            \"ffca66\",\n            \"fff6e6\",\n            \"ffa600\",\n        ]),\n        golden: hex_to_palette_rgba(\"#b6bfc1\", [\n            \"#b6bfc1\",\n            \"#253122\",\n            \"#f3a257\",\n        ]),\n        laurel: hex_to_palette_rgba(\"381d2a\", [\n            \"60b9bf\",\n            \"bffbff\",\n            \"96ff80\",\n            \"eaffe6\",\n            \"71bf60\",\n            \"ff80b0\",\n            \"ffe6ef\",\n            \"ffbfd7\",\n        ]),\n        msdos: hex_to_palette_rgba(\"#0c0786\", [\n            \"#0c0786\",\n            \"#7500a8\",\n            \"#c03b80\",\n            \"#f79241\",\n            \"#fcfea4\",\n        ]),\n        \"pink-beach\": hex_to_palette_rgba(\"f4777f\", [\n            \"93003a\",\n            \"cf3759\",\n            \"ffbcaf\",\n            \"ffffe0\",\n            \"a5d5d8\",\n            \"73a2c6\",\n            \"4771b2\",\n            \"00429d\",\n        ]),\n        rainbow: hex_to_palette_rgba(\"#000000\", [\n            \"#FF0000\",\n            \"#FF7F00\",\n            \"#FFFF00\",\n            \"#00FF00\",\n            \"#0000FF\",\n            \"#2E2B5F\",\n            \"#8B00FF\",\n        ]),\n        \"river-leaf\": hex_to_palette_rgba(\"80ab82\", [\n            \"7dcd85\",\n            \"c5d6d8\",\n            \"99f7ab\",\n            \"2f52e0\",\n            \"bced09\",\n            \"f9cb40\",\n            \"ff715b\",\n            \"4c5b5c\",\n        ]),\n        salvia: hex_to_palette_rgba(\"#b6bfc1\", [\n            \"#b6bfc1\",\n            \"#051230\",\n            \"#97acc8\",\n        ]),\n        summer: hex_to_palette_rgba(\"ffe000\", [\n            \"ffbf66\",\n            \"fff4e6\",\n            \"995900\",\n            \"ff9400\",\n            \"6695ff\",\n            \"e6edff\",\n            \"002577\",\n            \"003dc7\",\n        ]),\n        \"white-black\": hex_to_palette_rgba(\"#ffffff\", [\"#ffffff\", \"#000000\"]),\n    };\n\n    function hex_to_palette_rgba(hex_bg_color, hex_colors) {\n        const steps = Math.floor(254 / (hex_colors.length - 1));\n        let palette_rgb_uint8 = [];\n        for (let i = 0; i < hex_colors.length - 1; i++) {\n            const rgb1_uint8 = hex_to_rgba_uint8(hex_colors[i]).slice(0, 3);\n            const rgb2_uint8 = hex_to_rgba_uint8(hex_colors[i + 1]).slice(0, 3);\n\n            const colors_list = perceptualSteps(rgb1_uint8, rgb2_uint8, steps);\n            palette_rgb_uint8 = palette_rgb_uint8.concat(colors_list);\n        }\n        let bg_rgba_uint8;\n        if (hex_bg_color === \"\") {\n            bg_rgba_uint8 = [0, 0, 0, 0];\n        } else {\n            bg_rgba_uint8 = hex_to_rgba_uint8(hex_bg_color);\n        }\n        const bg_rgb_uint8 = bg_rgba_uint8.splice(0, 3);\n        palette_rgb_uint8.unshift(bg_rgb_uint8);\n\n        return palette_rgb_uint8;\n    }\n\n    function hex_to_rgba_uint8(hex) {\n        hex = hex.replace(\"#\", \"\");\n\n        rgbaList = [];\n        [0, 2, 4].forEach((i) => {\n            const hexColor = hex.substring(i, i + 2);\n            rgbaList.push(parseInt(hexColor, 16));\n        });\n        rgbaList.push(255);\n\n        return rgbaList;\n    }\n\n    function perceptualSteps(color1, color2, steps) {\n        const gamma = 0.43;\n\n        const rgbFloat1 = fromSRGB(color1);\n        const bright1 = bright(rgbFloat1, gamma);\n        const rgbFloat2 = fromSRGB(color2);\n        const bright2 = bright(rgbFloat2, gamma);\n\n        const colors = [];\n        for (let step = 0; step < steps; step++) {\n            const intensity =\n                lerp(bright1, bright2, step / steps) ** (1 / gamma);\n            let color = lerp(rgbFloat1, rgbFloat2, step / steps);\n\n            let colorSum = 0;\n            for (let i = 0; i < color.length; i++) {\n                colorSum += color[i];\n            }\n            if (colorSum !== 0) {\n                const tmpColor = [];\n                for (let i = 0; i < color.length; i++) {\n                    const c = color[i];\n                    tmpColor.push((c * intensity) / colorSum);\n                }\n                color = tmpColor;\n            }\n            color = toSRGB(color);\n            colors.push(color);\n        }\n\n        return colors;\n    }\n\n    function lerp(colors1, colors2, frac) {\n        if (colors1 instanceof Array) {\n            const colors = [];\n            for (let i = 0; i < colors1.length; i++) {\n                const color1 = colors1[i];\n                const color2 = colors2[i];\n                colors.push(color1 * (1 - frac) + color2 * frac);\n            }\n            return colors;\n        } else {\n            return colors1 * (1 - frac) + colors2 * frac;\n        }\n    }\n\n    function fromSRGB(rgbUINT8) {\n        const rgbFloat = [];\n        for (let i = 0; i < rgbUINT8.length; i++) {\n            const x = rgbUINT8[i];\n            const x_f = x / 255.0;\n            let y;\n            if (x_f <= 0.04045) {\n                y = x_f / 12.92;\n            } else {\n                y = ((x_f + 0.055) / 1.055) ** 2.4;\n            }\n\n            rgbFloat.push(y);\n        }\n\n        return rgbFloat;\n    }\n\n    function toSRGBFloat(x) {\n        if (x <= 0.0031308) {\n            x = 12.92 * x;\n        } else {\n            x = 1.055 * x ** (1 / 2.4) - 0.055;\n        }\n        return x;\n    }\n\n    function toSRGB(rgb) {\n        const rgbUINT8 = [];\n        for (let i = 0; i < rgb.length; i++) {\n            const c = rgb[i];\n            rgbUINT8.push(parseInt(255.9999 * toSRGBFloat(c), 10));\n        }\n        return rgbUINT8;\n    }\n\n    function bright(rgbFloat, gamma) {\n        let sum = 0;\n        for (let i = 0; i < rgbFloat.length; i++) {\n            sum += rgbFloat[i];\n        }\n\n        return sum ** gamma;\n    }\n\n    ///////////////////////////\n    // Setting public functions\n    ///////////////////////////\n    window.leniaEngine = {\n        init\n    };\n})();\n","import React, { useRef, useEffect } from \"react\"\nimport styled from \"styled-components\"\nconst axios = require('axios');\nif (typeof window !== 'undefined') {\n    require('../engine')\n}\n\n// const wasmModule = require('../../static/optimized.wasm')\n\nconst StyledDiv = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n`\n\nconst Generator = ({ zoom, fps, scale, lenia_id }) => {\n    const nodeRef = useRef(null);\n\n    useEffect(async () => {\n        const response = await axios.get(`/metadata/${lenia_id}.json`);\n        let leniaMetadata = response.data\n\n        leniaMetadata[\"config\"][\"world_params\"][\"scale\"] = scale\n\n        window.leniaEngine.init(leniaMetadata, zoom, fps);\n    })\n    \n    return (\n        <StyledDiv ref={nodeRef}>\n            <canvas id=\"RENDERING_CANVAS\"></canvas>\n        </StyledDiv>\n    )\n}\n\nexport default Generator","import React from \"react\"\nimport { useQueryParam, NumberParam } from \"use-query-params\";\n\nimport Generator from \"../components/generator\"\n\nconst GeneratorPage = () => {\n    const [id] = useQueryParam(\"id\", NumberParam);\n    const [scale] = useQueryParam(\"scale\", NumberParam);\n    const [fps] = useQueryParam(\"fps\", NumberParam);\n    const [zoom] = useQueryParam(\"zoom\", NumberParam);\n\n    return (\n        <Generator zoom={zoom || 1} fps={fps || 26} scale={scale || 2} lenia_id={id || 0} />\n    )\n}\n\nexport default GeneratorPage"],"names":["INIT_CELLS","SCALE","exportsUpdateFn","ADD_LENIA","INIT_CELLS_X","INIT_CELLS_Y","CANVAS_CELLS","RENDERING_CANVAS","WORLD_SIZE","BUFFER_SIZE","PIXEL_SIZE","CANVAS_SIZE","ch2val","c","nbChars","console","assert","length","first_char","second_char","ord","InitCanvas","id","canvas_size","canvas","document","createElement","getElementById","width","height","ctx","getContext","img","createImageData","rect","getBoundingClientRect","can","left","top","copyInitCells","buffer","newCells","x1","y1","scale","angle","arr","h","shape","w","sin","Math","PI","cos","fh","abs","fw","fi","fj","i","round","j","x","Mod","y","setKernel","fft2dFn","R","kernels_params","bs","k_id","k_q","k_r","tmp_bs","kernelRe","world_size","Array","Float32Array","fill","createDataArray","tmp_bs_arr","split","index","push","parseInt","parseFloat","weight","world_size_center","ii","jj","v","kernelShell","sqrt","rowIdx","set","tmpArr","dist","nb_b","b_dist","b_threshold","min","floor","k_val","out","exp","kernelFn","n","setGlobals","max","computeWorldSize","letter","charCodeAt","clearCells","crop","bounds","xm","ym","cells","subarray","onClick","e","target","clientX","clientY","COLORS","alizarin","hex_to_palette_rgba","cinnamon","city","golden","laurel","msdos","rainbow","salvia","summer","hex_bg_color","hex_colors","steps","palette_rgb_uint8","colors_list","perceptualSteps","hex_to_rgba_uint8","slice","concat","bg_rgb_uint8","splice","unshift","hex","replace","rgbaList","forEach","hexColor","substring","color1","color2","gamma","rgbFloat1","fromSRGB","bright1","bright","rgbFloat2","bright2","colors","step","intensity","lerp","color","colorSum","tmpColor","toSRGB","colors1","colors2","frac","rgbUINT8","rgbFloat","x_f","rgb","sum","window","leniaEngine","init","metadata","zoom","fps","worldSize","nb_pages","memory","WebAssembly","Memory","initial","wasmConfig","env","engine","GF_ID","GF_M","GF_S","T","instantiateStreaming","fetch","then","instance","exports","updateFn","config","initCells","string_cells","string_array","max_val","raw_shape","cells_shape","cells_val_l","val_f","flat_data","nb_channels","nb_rows","nb_cols","channel","row","k","createMat","decompressArray","initDone","currentScale","setWorldSize","FFT2D","nbStepsForStabilization","copyWithin","initWithProgressiveScaling","loop","setTimeout","update","attributes","colorName","attribute","trim","toLocaleLowerCase","requestAnimationFrame","rgba","nb_colors","buf","data","p","putImageData","drawImage","DrawArray","render","body","addEventListener","keyCode","setListener","catch","error","log","axios","require","StyledDiv","styled","lenia_id","nodeRef","useRef","useEffect","get","response","leniaMetadata","ref","useQueryParam","NumberParam"],"sourceRoot":""}