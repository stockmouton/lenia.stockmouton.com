{"version":3,"file":"de50f83d73a0875bc452b0a5b419d0271fc009db-49b6180c961e4d5d3945.js","mappings":"40nDAOMA,GAAuBC,EAAAA,EAAAA,eAAc,MAE9BC,EACE,cADFA,EAEF,UAFEA,EAGH,SAQJC,EAAgB,SAACC,EAAiBC,GACtC,OAAIA,EAAqBH,EACrBE,EAAwBF,EACrBA,GAGII,EAAwB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACtC,GAAkCC,EAAAA,EAAAA,KAA1BC,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,QACtB,GAAgCC,EAAAA,EAAAA,UAAS,MAAlCC,EAAP,KAAiBC,EAAjB,KACA,GAAgDF,EAAAA,EAAAA,UAAS,MAAlDG,EAAP,KAAyBC,EAAzB,KACA,GAAgDJ,EAAAA,EAAAA,UAAS,GAAlDK,EAAP,KAAyBC,EAAzB,KACA,GAAgDN,EAAAA,EAAAA,UAAS,GAAlDO,EAAP,KAAyBC,EAAzB,KACA,GAAoCR,EAAAA,EAAAA,UAAST,GAAtCkB,EAAP,KAAmBC,EAAnB,KACA,GAAwDV,EAAAA,EAAAA,WAAS,GAA1DW,EAAP,KAA6BC,EAA7B,KAEOC,GAAWC,EAAAA,EAAAA,IAAc,UAAWC,EAAAA,IAA3C,GAEMC,EAAe,WACnB,IACE,IAAMC,EAxBS,SAASJ,GAC5B,MAA8B,gBAA1B,MAAAK,OAAA,iBAAsD,YAAZL,EAA8BM,EAC9C,gBAA1B,MAAAD,OAAA,gBAA+CE,EAC5CC,EAqBeC,CAAaT,GACzBZ,EAAWH,EAAe,IAAIA,EAAayB,IAAIC,SAASP,EAAUQ,UAAUC,MAAMC,IAAKV,EAAUQ,UAAUC,MAAME,SAAW,KAElI,GADA1B,EAAYD,GACRgB,EAAUQ,UAAUI,cAAe,CACrC,IAAM1B,EAAmBL,EAAe,IAAIA,EAAayB,IAAIC,SAASP,EAAUQ,UAAUI,cAAcF,IAAKV,EAAUQ,UAAUI,cAAcD,SAAW,KAC1JxB,EAAoBD,IAEtB,MAAM2B,GACNC,QAAQC,IAAIF,MAKhBG,EAAAA,EAAAA,WAAUjB,EAAc,CAAClB,IAEzB,IAAMoC,EAAkB,mCAAG,gGACrBjC,EADqB,iCAEOA,EAASkC,QAAQ1C,kBAAkB2C,KAAK,CAACC,KAAMtC,IAFtD,cAEjBN,EAFiB,gBAGYQ,EAASkC,QAAQxB,qBAAqBZ,GAASqC,KAAK,CAACC,KAAMtC,IAHvE,cAGjBY,EAHiB,gBAIIV,EAASkC,QAAQzC,eAAe0C,KAAK,CAAEC,KAAMtC,IAJjD,cAIjBL,EAJiB,iBAKQO,EAASkC,QAAQG,aAAaF,KAAK,CAAEC,KAAMtC,IALnD,kDAKiE,EALjE,eAKjBM,EALiB,eAMQJ,EAASkC,QAAQI,cAAcH,KAAK,CAAEC,KAAMtC,IANpD,kDAMkE,EANlE,QAMjBQ,EANiB,KAOvBG,EAAclB,EAAcC,EAAiBC,IAC7CkB,EAAwBD,GACxBL,EAAoBkC,SAASnC,EAAkB,KAC/CG,EAAoBgC,SAASjC,EAAkB,KAVxB,4CAAH,qDAclBkC,EAAoB,mCAAG,+GAEMxC,EAASkC,QAAQI,cAAcH,KAAK,CAAEC,KAAMtC,IAFlD,cAEnBQ,EAFmB,gBAGUN,EAASkC,QAAQxB,qBAAqBZ,GAASqC,KAAK,CAACC,KAAMtC,IAHrE,OAGnBY,EAHmB,OAKzBC,EAAwBD,GACxBH,EAAoBgC,SAASjC,EAAkB,KANtB,4GAAH,qDAY1B,OACE,gCACE,gBAAClB,EAAqBqD,SAAtB,CAA+BC,MAAO,CACpC1C,SAAAA,EACAE,iBAAAA,EACAa,aAAAA,EACAkB,mBAAAA,EACAO,qBAAAA,EACAhC,WAAAA,EACAE,qBAAAA,EACAN,iBAAAA,EACAE,iBAAAA,IACEX,KAKGgD,EAAmB,kBAAMC,EAAAA,EAAAA,YAAWxD","sources":["webpack://lenia.stockmouton.com/./src/components/lenia-contract-provider.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react'\nimport { useQueryParam, StringParam } from \"use-query-params\";\nimport { useWeb3 } from \"./web3-provider\"\nimport artifactsMain from '../artifacts/main.json'\nimport artifactsRinkeby from '../artifacts/rinkeby.json'\nimport artifactsLocalhost from '../artifacts/localhost.json'\n\nconst leniaContractContext = createContext(null)\n\nexport const SALE_STATUSES = {\n  NOT_STARTED: 'NOT_STARTED',\n  PRESALE: 'PRESALE',\n  PUBLIC: 'PUBLIC',\n}\n\nconst getArtifacts = function(network) {\n  if (process?.env.NODE_ENV === 'production' && network === 'rinkeby') return artifactsRinkeby\n  if (process?.env.NODE_ENV === 'production') return artifactsMain\n  return artifactsLocalhost\n}\nconst getSaleStatus = (isPresaleActive, isSaleActive) => {\n  if (isSaleActive) return SALE_STATUSES.PUBLIC\n  if (isPresaleActive) return SALE_STATUSES.PRESALE\n  return SALE_STATUSES.NOT_STARTED\n}\n\nexport const LeniaContractProvider = ({ children }) => {\n  const { web3Provider, account } = useWeb3()\n  const [contract, setContract] = useState(null)\n  const [metadataContract, setMetadataContract] = useState(null)\n  const [totalLeniaSupply, setTotalLeniaSupply] = useState(0)\n  const [totalLeniaMinted, setTotalLeniaMinted] = useState(0)\n  const [saleStatus, setSaleStatus] = useState(SALE_STATUSES.NOT_STARTED)\n  const [isEligibleForPresale, setIsEligibleForPresale] = useState(false)\n\n  const [network] = useQueryParam(\"network\", StringParam)\n  \n  const initContract = () => {\n    try {\n      const artifacts = getArtifacts(network)\n      const contract = web3Provider ? new web3Provider.eth.Contract(artifacts.contracts.Lenia.abi, artifacts.contracts.Lenia.address) : null\n      setContract(contract)\n      if (artifacts.contracts.LeniaMetadata) {\n        const metadataContract = web3Provider ? new web3Provider.eth.Contract(artifacts.contracts.LeniaMetadata.abi, artifacts.contracts.LeniaMetadata.address) : null\n        setMetadataContract(metadataContract)\n      }\n    } catch(error) {\n      console.log(error)\n      // Contract is not deployed or the wrong artifact is being imported\n    }\n  }\n  \n  useEffect(initContract, [web3Provider])\n\n  const initBlockchainData = async () => {\n    if (contract) {\n      const isPresaleActive = await contract.methods.isPresaleActive().call({from: account})\n      const isEligibleForPresale = await contract.methods.isEligibleForPresale(account).call({from: account})\n      const isSaleActive = await contract.methods.isSaleActive().call({ from: account })      \n      const totalLeniaSupply = await contract.methods.MAX_SUPPLY().call({ from: account }) || 0\n      const totalLeniaMinted = await contract.methods.totalSupply().call({ from: account }) || 0\n      setSaleStatus(getSaleStatus(isPresaleActive, isSaleActive))\n      setIsEligibleForPresale(isEligibleForPresale)\n      setTotalLeniaSupply(parseInt(totalLeniaSupply, 10))\n      setTotalLeniaMinted(parseInt(totalLeniaMinted, 10))\n    }\n  }\n\n  const updateBlockchainData = async () => {\n    try {\n      const totalLeniaMinted = await contract.methods.totalSupply().call({ from: account })\n      const isEligibleForPresale = await contract.methods.isEligibleForPresale(account).call({from: account})\n      \n      setIsEligibleForPresale(isEligibleForPresale)\n      setTotalLeniaMinted(parseInt(totalLeniaMinted, 10))\n    } catch(error) {\n      // Do nothing, this is just a read operation, no need to scare the user.\n    }\n  }\n\n  return (\n    <>\n      <leniaContractContext.Provider value={{\n        contract,\n        metadataContract,\n        initContract,\n        initBlockchainData,\n        updateBlockchainData,\n        saleStatus,\n        isEligibleForPresale,\n        totalLeniaSupply,\n        totalLeniaMinted,\n      }}>{children}</leniaContractContext.Provider>\n    </>\n  )\n}\n\nexport const useLeniaContract = () => useContext(leniaContractContext)"],"names":["leniaContractContext","createContext","SALE_STATUSES","getSaleStatus","isPresaleActive","isSaleActive","LeniaContractProvider","children","useWeb3","web3Provider","account","useState","contract","setContract","metadataContract","setMetadataContract","totalLeniaSupply","setTotalLeniaSupply","totalLeniaMinted","setTotalLeniaMinted","saleStatus","setSaleStatus","isEligibleForPresale","setIsEligibleForPresale","network","useQueryParam","StringParam","initContract","artifacts","process","artifactsRinkeby","artifactsMain","artifactsLocalhost","getArtifacts","eth","Contract","contracts","Lenia","abi","address","LeniaMetadata","error","console","log","useEffect","initBlockchainData","methods","call","from","MAX_SUPPLY","totalSupply","parseInt","updateBlockchainData","Provider","value","useLeniaContract","useContext"],"sourceRoot":""}