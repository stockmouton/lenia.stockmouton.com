{"version":3,"file":"component---src-pages-generator-js-b1df1d6b81b3291cf913.js","mappings":"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","sources":["webpack://lenia.stockmouton.com/./src/engine.js","webpack://lenia.stockmouton.com/./src/components/generator.js","webpack://lenia.stockmouton.com/./src/pages/generator.js"],"sourcesContent":["(() => {\n    // Most problematic functions: FFT1D, transpose2D, complexMatrixDot\n    // Those are problematic because they are called all the time\n\n    ///////////////////////////////\n    // Globals\n    ///////////////////////////////\n    const NB_CHARS =\n        ord(\"Z\") - ord(\"A\") + (ord(\"z\") - ord(\"a\")) + (ord(\"þ\") - ord(\"À\"));\n    const PRECISION = 1000000;\n    const EPSILON = 1 / PRECISION; // machine epsilon\n    const π = Math.PI;\n    let R = 13;\n    let T = 10;\n\n    let gf_id = 0;\n    let gf_m = 0.14;\n    let gf_s = 0.015;\n\n    let ADD_LENIA = false;\n    let INIT_CELLS; let INIT_CELLS_X = 0; let INIT_CELLS_Y = 0;\n    let SCALE;\n    let ZOOM;\n\n    let cells = null;\n    let cellsIm = null;\n\n    let kernelRe = null;\n    let kernelIm = null;\n\n    let CANVAS_CELLS = null;\n    let RENDERING_CANVAS = null;\n    const CANVAS_SCALING = 2. \n\n    const BUFFER_CELLS_IDX = 0;\n    const BUFFER_CELLS_OLD_IDX = 1;\n    const BUFFER_CELLS_IMAG_IDX = 2;\n    const BUFFER_FIELD_IDX = 3;\n    const BUFFER_POTENTIAL_REAL_IDX = 4;\n    const BUFFER_POTENTIAL_IMAG_IDX = 5;\n    const BUFFER_KERNEL_REAL_IDX = 6;\n    const BUFFER_KERNEL_IMAG_IDX = 7;\n    const BUFFER_CELLS_OUT_IDX = 8;\n    const BUFFER_TABLES_IDX = 9;\n\n    let WORLD_SIZE = 1;\n    let BUFFER_SIZE = 1;\n    let PIXEL = 1;\n    let CANVAS_SIZE = 1;\n    const COLORS = {\n        alizarin: hex_to_palette_rgba(\"d6c3c9\", [\n            \"f9c784\",\n            \"e7e7e7\",\n            \"485696\",\n            \"19180a\",\n            \"3f220f\",\n            \"772014\",\n            \"af4319\",\n            \"e71d36\",\n        ]),\n        \"black-white\": hex_to_palette_rgba(\"000000\", [\n            \"1f2123\",\n            \"393b41\",\n            \"555860\",\n            \"737780\",\n            \"9497a1\",\n            \"b6b9c1\",\n            \"d9dbe1\",\n            \"ffffff\",\n        ]),\n        \"carmine-blue\": hex_to_palette_rgba(\"#006eb8\", [\n            \"#006eb8\",\n            \"#fff200\",\n            \"#cc1236\",\n        ]),\n        cinnamon: hex_to_palette_rgba(\"#a7d4e4\", [\n            \"#a7d4e4\",\n            \"#71502f\",\n            \"#fdc57e\",\n        ]),\n        city: hex_to_palette_rgba(\"F93943\", [\n            \"23005c\",\n            \"3a0099\",\n            \"66daff\",\n            \"e6f9ff\",\n            \"004b63\",\n            \"ffca66\",\n            \"fff6e6\",\n            \"ffa600\",\n        ]),\n        golden: hex_to_palette_rgba(\"#b6bfc1\", [\n            \"#b6bfc1\",\n            \"#253122\",\n            \"#f3a257\",\n        ]),\n        laurel: hex_to_palette_rgba(\"381d2a\", [\n            \"60b9bf\",\n            \"bffbff\",\n            \"96ff80\",\n            \"eaffe6\",\n            \"71bf60\",\n            \"ff80b0\",\n            \"ffe6ef\",\n            \"ffbfd7\",\n        ]),\n        msdos: hex_to_palette_rgba(\"#0c0786\", [\n            \"#0c0786\",\n            \"#7500a8\",\n            \"#c03b80\",\n            \"#f79241\",\n            \"#fcfea4\",\n        ]),\n        \"pink-beach\": hex_to_palette_rgba(\"f4777f\", [\n            \"93003a\",\n            \"cf3759\",\n            \"ffbcaf\",\n            \"ffffe0\",\n            \"a5d5d8\",\n            \"73a2c6\",\n            \"4771b2\",\n            \"00429d\",\n        ]),\n        rainbow: hex_to_palette_rgba(\"#000000\", [\n            \"#FF0000\",\n            \"#FF7F00\",\n            \"#FFFF00\",\n            \"#00FF00\",\n            \"#0000FF\",\n            \"#2E2B5F\",\n            \"#8B00FF\",\n        ]),\n        \"river-Leaf\": hex_to_palette_rgba(\"80ab82\", [\n            \"7dcd85\",\n            \"c5d6d8\",\n            \"99f7ab\",\n            \"2f52e0\",\n            \"bced09\",\n            \"f9cb40\",\n            \"ff715b\",\n            \"4c5b5c\",\n        ]),\n        salvia: hex_to_palette_rgba(\"#b6bfc1\", [\n            \"#b6bfc1\",\n            \"#051230\",\n            \"#97acc8\",\n        ]),\n        summer: hex_to_palette_rgba(\"ffe000\", [\n            \"ffbf66\",\n            \"fff4e6\",\n            \"995900\",\n            \"ff9400\",\n            \"6695ff\",\n            \"e6edff\",\n            \"002577\",\n            \"003dc7\",\n        ]),\n        \"white-black\": hex_to_palette_rgba(\"#ffffff\", [\"#ffffff\", \"#000000\"]),\n    };\n    let colorName = \"msdos\";\n\n    ///////////////////////////////\n    // Loader\n    ///////////////////////////////\n    let roundFn;\n    let exportsUpdateFn;\n    function init(metadata, zoom=1, fps=30) {\n        ZOOM = parseInt(Math.min(Math.max(zoom, 1), 5), 10);\n\n        let scale = metadata[\"config\"][\"world_params\"][\"scale\"];\n        SCALE = parseInt(Math.min(Math.max(scale, 1), 4), 10);\n        let size_power2;\n        if (SCALE <= 1) {\n            size_power2 = 7;\n        } else if (SCALE <= 2) {\n            size_power2 = 8;\n        } else {\n            size_power2 = 9;\n        }\n        resizeAll(size_power2, ZOOM - 1);\n\n        BUFFER_SIZE = WORLD_SIZE**2\n        nb_buffers = 9 + 1; // 9 image buffers + 1 table buffer\n        const byteSize = (BUFFER_SIZE * nb_buffers) << 2;\n        const nb_pages = ((byteSize + 0xffff) & ~0xffff) >>> 16;\n        // Shared memory does not work on Safari\n        // Shared memory are needed for workers\n        // but you need some fancy CORS configuration to make it work.\n        // Overall, it's probably better to look at GPU support.\n        const memory = new WebAssembly.Memory({\n            initial: nb_pages,\n            // maximum: nb_pages,\n            // shared: true\n        });\n        const wasmConfig = {\n            env: {\n                memory\n            },\n            engine: {  // Name of the file\n                WORLD_SIZE  : WORLD_SIZE,\n                GF_ID       : gf_id,\n                GF_M        : gf_m,\n                GF_S        : gf_s,\n                T           : T,\n            },\n            Math\n        };\n        const wasmFilename = 'optimized.wasm';\n        WebAssembly.instantiateStreaming(fetch(wasmFilename), wasmConfig)\n        // WebAssembly.instantiateStreaming(fetch('untouched.wasm'), wasmConfig)\n            .then( ({ instance }) => {\n                exports = instance.exports\n\n                roundFn = exports.round\n                exportsUpdateFn = exports.updateFn\n                let buffer = new Float32Array(memory.buffer);\n\n                initWithProgressiveScaling(metadata, buffer, exports)\n\n                update(buffer, fps);\n                render(buffer)\n\n                setListener(buffer)\n            })\n            .catch( (error) => {\n                console.log(error);\n            });\n    }\n\n    function initWithProgressiveScaling(metadata, buffer, exports) {\n        const config = metadata[\"config\"]\n        const attributes = metadata[\"attributes\"]\n\n        setParameters(config[\"world_params\"], config[\"kernels_params\"], attributes);\n\n        let cellsSt = config[\"cells\"];\n        let initCells = decompressArray(cellsSt);\n        let initDone = false\n        while (SCALE > 1 || !initDone) {\n            initDone = true\n            let currentScale = Math.min(SCALE, 2.)\n        \n            if (SCALE != 1) {\n                R = Math.round(Bound(R * currentScale, 2, WORLD_SIZE));\n            }\n            setKernel(buffer, exports.FFT2D, config[\"kernels_params\"]);\n            let x1 = Math.floor(WORLD_SIZE / 2 - (initCells.shape[2] / 2) * SCALE);\n            let y1 = Math.floor(WORLD_SIZE / 2 - (initCells.shape[1] / 2) * SCALE);\n            const angle = 0;\n            copyInitCells(buffer, initCells, x1, y1, currentScale, angle);\n\n            const nbStepsForStabilization = 20;\n            for (let index = 0; index < nbStepsForStabilization; index++) {\n                buffer.copyWithin(\n                    BUFFER_CELLS_IDX * BUFFER_SIZE, // dest\n                    BUFFER_CELLS_OUT_IDX * BUFFER_SIZE,  // src\n                    (BUFFER_CELLS_OUT_IDX + 1) * BUFFER_SIZE\n                );\n                exportsUpdateFn()\n            }\n            initCells = crop(buffer)\n            SCALE /= currentScale\n        }\n\n        INIT_CELLS = initCells\n    }\n\n    function setListener(buffer){\n        document.body.addEventListener(\"keydown\", (e) => {\n            if (e.keyCode == 32) {\n                ClearCells(buffer, 0);\n            }\n        });\n        document.getElementById(\"RENDERING_CANVAS\").addEventListener(\"click\", onClick);\n    }\n\n    function crop(buffer){\n        let bounds = {'x': WORLD_SIZE, 'y': WORLD_SIZE, 'xm': 0, 'ym': 0}\n        for (let y = 0; y < WORLD_SIZE; y++) {\n            for (let x = 0; x < WORLD_SIZE; x++) {\n                let v = buffer[BUFFER_CELLS_OUT_IDX * BUFFER_SIZE + y * WORLD_SIZE + x]\n                if(v > 0) {\n                    bounds.x = Math.min(x, bounds.x)\n                    bounds.y = Math.min(y, bounds.y)\n                    bounds.xm = Math.max(x, bounds.xm)\n                    bounds.ym = Math.max(y, bounds.ym)\n                }\n            }\n        }\n        let cells = {\n            \"arr\": [[]],\n            \"shape\": [1, bounds.ym - bounds.y, bounds.xm - bounds.x]\n        } \n        console.log(bounds)\n        for (let y = bounds.y; y < bounds.ym; y++) {\n            let subarray = new Float32Array(cells.shape[2])\n            for (let x = bounds.x, i = 0; x < bounds.xm; x++, i++) {\n                subarray[i] = buffer[BUFFER_CELLS_OUT_IDX * BUFFER_SIZE + y * WORLD_SIZE + x]\n            }\n            cells.arr[0].push(subarray)\n        }\n        \n        return cells\n    }\n\n    function decompressArray(string_cells) {\n        let string_array = string_cells.split(\"::\");\n\n        console.assert(\n            string_array.length == 2 && string_array[0].length % 2 == 0\n        );\n\n        let max_val = NB_CHARS ** 2 - 1;\n        let raw_shape = string_array[1].split(\";\");\n        let cells_shape = [];\n        for (let index = 0; index < raw_shape.length; index++) {\n            cells_shape.push(parseInt(raw_shape[index], 10));\n        }\n        let cells_val_l = [];\n        for (let index = 0; index < string_array[0].length; index += 2) {\n            let val_i = ch2val(\n                string_array[0][index] + string_array[0][index + 1]\n            );\n            let val_f = val_i / max_val;\n            cells_val_l.push(val_f);\n        }\n        let cellsMat = createArray(cells_val_l, cells_shape);\n\n        return cellsMat;\n    }\n\n    function ch2val(c) {\n        console.assert(c.length == 2);\n\n        let first_char = c[0];\n        let second_char = c[1];\n\n        let first_char_idx;\n        let second_char_idx;\n        if (ord(first_char) >= ord(\"À\")) {\n            first_char_idx =\n                ord(first_char) -\n                ord(\"À\") +\n                (ord(\"Z\") - ord(\"A\")) +\n                (ord(\"z\") - ord(\"a\"));\n        } else if (ord(first_char) >= ord(\"a\")) {\n            first_char_idx = ord(first_char) - ord(\"a\") + (ord(\"Z\") - ord(\"A\"));\n        } else {\n            first_char_idx = ord(first_char) - ord(\"A\");\n        }\n\n        if (ord(second_char) >= ord(\"À\")) {\n            second_char_idx =\n                ord(second_char) -\n                ord(\"À\") +\n                (ord(\"Z\") - ord(\"A\")) +\n                (ord(\"z\") - ord(\"a\"));\n        } else if (ord(second_char) >= ord(\"a\")) {\n            second_char_idx =\n                ord(second_char) - ord(\"a\") + (ord(\"Z\") - ord(\"A\"));\n        } else {\n            second_char_idx = ord(second_char) - ord(\"A\");\n        }\n\n        return first_char_idx * NB_CHARS + second_char_idx;\n    }\n\n    function createArray(flat_data, shape) {\n        console.assert(shape.length == 3);\n\n        let nb_channels = shape[0];\n        let nb_rows = shape[1];\n        let nb_cols = shape[2];\n\n        let arr = new Array(nb_channels);\n        for (let i = 0; i < nb_channels; i++) {\n            let channel = new Array(nb_rows);\n            for (let j = 0; j < nb_rows; j++) {\n                let row = new Array(nb_cols);\n                for (let k = 0; k < nb_cols; k++) {\n                    row[k] =\n                        flat_data[i * (nb_rows + nb_cols) + j * nb_cols + k];\n                }\n                channel[j] = row;\n            }\n            arr[i] = channel;\n        }\n\n        let arr_data = {\n            arr: arr,\n            shape: shape,\n        };\n        return arr_data;\n    }\n\n    function setParameters(leniax_world_params, kernels_params, attributes) {\n        for (let index = 0; index < attributes.length; index++) {\n            const attribute = attributes[index];\n            if (attribute[\"trait_type\"] === \"Colormap\") {\n                colorName = attribute[\"value\"]\n                    .trim()\n                    .toLocaleLowerCase()\n                    .replace(\" \", \"-\");\n            }\n        }\n\n        R = leniax_world_params[\"R\"];\n        T = leniax_world_params[\"T\"];\n\n        gf_id = kernels_params[0][\"gf_id\"];\n        gf_m = kernels_params[0][\"m\"];\n        gf_s = kernels_params[0][\"s\"];\n    }\n\n    function resizeAll(size_power2, zoom_power2=0) {\n        WORLD_SIZE = 1 << size_power2;\n        PIXEL = 1 << zoom_power2;\n        CANVAS_SIZE = Math.round(WORLD_SIZE * PIXEL);\n\n        InitAllArrays(WORLD_SIZE);\n        CANVAS_CELLS = InitCanvas(null, CANVAS_SIZE);\n        RENDERING_CANVAS = InitCanvas(\"RENDERING_CANVAS\", CANVAS_SIZE * CANVAS_SCALING)\n        RENDERING_CANVAS.ctx.scale(CANVAS_SCALING, CANVAS_SCALING)\n    }\n\n    function InitAllArrays(world_size) {\n        cells = null;\n        cells = createDataArray(world_size);\n        cellsOld = null;\n        cellsOld = createDataArray(world_size);\n        cellsIm = null;\n        cellsIm = createDataArray(world_size);\n\n        kernelRe = null;\n        kernelRe = createDataArray(world_size);\n        kernelIm = null;\n        kernelIm = createDataArray(world_size);\n\n        potentialRe = null;\n        potentialRe = createDataArray(world_size);\n        potentialIm = null;\n        potentialIm = createDataArray(world_size);\n    }\n\n    function createDataArray(world_size) {\n        let arr = Array(world_size);\n        for (let i = 0; i < world_size; i++)\n            arr[i] = new Float32Array(world_size).fill(0);\n        return arr;\n    }\n\n    function InitCanvas(id, canvas_size) {\n        let canvas;\n        if (id == null){\n            canvas = document.createElement('canvas');\n        } else {\n            canvas = document.getElementById(id);\n        }\n        canvas.width = canvas.height = canvas_size;\n        let ctx = canvas.getContext(\"2d\");\n        let img = ctx.createImageData(canvas.width, canvas.height);\n        let rect = canvas.getBoundingClientRect();\n\n        return {\n            can: canvas,\n            ctx: ctx,\n            img: img,\n            left: rect.left,\n            top: rect.top,\n        };\n    }\n\n    function copyInitCells(buffer, newCells, x1, y1, scale, angle) {\n        let arr = newCells.arr[0];\n        let h = newCells.shape[1];\n        let w = newCells.shape[2];\n\n        let sin = Math.sin((angle / 180) * π);\n        let cos = Math.cos((angle / 180) * π);\n        let fh = (Math.abs(h * cos) + Math.abs(w * sin) + 1) * scale - 1;\n        let fw = (Math.abs(w * cos) + Math.abs(h * sin) + 1) * scale - 1;\n        for (let fi = 0; fi < fh; fi++) {\n            for (let fj = 0; fj < fw; fj++) {\n                let i = Math.round(\n                    (-(fj - fw / 2) * sin + (fi - fh / 2) * cos) / scale + h / 2\n                );\n                let j = Math.round(\n                    (+(fj - fw / 2) * cos + (fi - fh / 2) * sin) / scale + w / 2\n                );\n                let x = Mod(fj + x1, WORLD_SIZE);\n                let y = Mod(fi + y1, WORLD_SIZE);\n\n                let inBounds = (i >= 0 && j >= 0 && i < h && j < arr[i].length)\n                let c = inBounds ? arr[i][j] : 0.;\n                if (c > 0) {\n                    buffer[BUFFER_CELLS_OUT_IDX * BUFFER_SIZE + y * WORLD_SIZE + x] = c\n                };\n            }\n        }\n    }\n\n    ///////////////////////////////\n    // Renderer\n    ///////////////////////////////\n    function update(buffer, fps) {\n        (function loop() {\n            setTimeout(loop, 1000 / fps);\n            \n            buffer.copyWithin(\n                BUFFER_CELLS_IDX * BUFFER_SIZE, // dest\n                BUFFER_CELLS_OUT_IDX * BUFFER_SIZE,  // src\n                (BUFFER_CELLS_OUT_IDX + 1) * BUFFER_SIZE\n            );\n            exportsUpdateFn()\n\n            if (ADD_LENIA) {\n                const x1 = Math.floor(\n                    INIT_CELLS_X / PIXEL - (INIT_CELLS.shape[2] / 2) / SCALE\n                );\n                const y1 = Math.floor(\n                    INIT_CELLS_Y / PIXEL - (INIT_CELLS.shape[1] / 2) / SCALE\n                );\n                copyInitCells(buffer, INIT_CELLS, x1, y1, SCALE, 0);\n\n                ADD_LENIA = false;\n            }\n        })();\n    }\n\n    function render(buffer) {\n        (function loop() {\n            window.requestAnimationFrame(loop);\n            DrawArray(CANVAS_CELLS, buffer, 1);\n        })();\n    }\n\n    function DrawArray(canvas, buffer, max_val) {\n        const nb_colors = COLORS[colorName].length;\n        let buf = canvas.img.data;\n\n        let p = 0;\n        let rgba;\n        for (let i = 0; i < CANVAS_SIZE; i++) {\n            let ii = Math.floor(i / PIXEL);\n            for (let j = 0; j < CANVAS_SIZE; j++) {\n                let jj = Math.floor(j / PIXEL);\n                let outBufPos = BUFFER_CELLS_OUT_IDX * BUFFER_SIZE + ii * WORLD_SIZE + jj;\n\n                let v = buffer[outBufPos] * max_val;\n                let c = Math.floor(v * nb_colors);\n                c = Math.max(c, 0);\n                c = Math.min(c, nb_colors - 1);\n                rgba = COLORS[colorName][c];\n\n                for (let n = 0; n < 3; n++) {\n                    buf[p++] = rgba[n];\n                }\n                buf[p++] = 255;\n            }\n        }\n\n        canvas.ctx.putImageData(canvas.img, 0, 0);\n        RENDERING_CANVAS.ctx.drawImage(canvas.can, 0, 0);\n    }\n\n    ///////////////////////////////\n    // Kernels\n    ///////////////////////////////\n    function setKernel(buffer, fft2dFn, kernels_params) {\n        let k_id = kernels_params[0][\"k_id\"];\n        let k_q = kernels_params[0][\"q\"];\n        let k_r = kernels_params[0][\"r\"];\n        let tmp_bs = kernels_params[0][\"b\"];\n        let bs;\n        if (typeof tmp_bs == \"string\") {\n            bs = [];\n            let tmp_bs_arr = tmp_bs.split(\",\");\n            for (let index = 0; index < tmp_bs_arr.length; index++) {\n                const split = tmp_bs_arr[index].split(\"/\");\n                if (split.length == 2) {\n                    bs.push(parseInt(split[0], 10) / parseInt(split[1], 10));\n                } else {\n                    bs.push(parseFloat(split[0]));\n                }\n            }\n        } else {\n            bs = kernels_params[0][\"b\"];\n        }\n\n        let weight = 0.0;\n        const world_size_center = WORLD_SIZE / 2;\n        for (let i = 0; i < WORLD_SIZE; i++) {\n            for (let j = 0; j < WORLD_SIZE; j++) {\n                let ii =\n                    ((i + world_size_center) % WORLD_SIZE) - world_size_center;\n                let jj =\n                    ((j + world_size_center) % WORLD_SIZE) - world_size_center;\n                let r = Math.sqrt(ii * ii + jj * jj) / R;\n                let v = kernelShell(k_id, k_q, bs, k_r, r);\n                weight += v;\n                kernelRe[i][j] = v;\n                ii = WORLD_SIZE - ((i + WORLD_SIZE / 2) % WORLD_SIZE) - 1;\n                jj = (j + WORLD_SIZE / 2) % WORLD_SIZE;\n            }\n        }\n\n        for (let i = 0; i < WORLD_SIZE; i++) {\n            for (let j = 0; j < WORLD_SIZE; j++) {\n                kernelRe[i][j] /= weight;\n            }\n        }\n\n        for (let rowIdx = 0; rowIdx < WORLD_SIZE; rowIdx++) {\n            buffer.set(kernelRe[rowIdx], BUFFER_KERNEL_REAL_IDX * BUFFER_SIZE + rowIdx * WORLD_SIZE);\n        }\n        fft2dFn(1, BUFFER_KERNEL_REAL_IDX, BUFFER_POTENTIAL_IMAG_IDX)\n    }\n\n    function kernelShell(k_id, k_q, bs, k_r, dist) {\n        let nb_b = bs.length;\n        let b_dist = nb_b * dist;\n        let b_threshold =\n            bs[Math.min(parseInt(Math.floor(b_dist), 10), nb_b - 1)];\n\n        let k_val = (dist < 1) * kernelFn(k_id, k_q, b_dist % 1) * b_threshold;\n\n        return k_val;\n    }\n\n    function kernelFn(k_id, k_q, x) {\n        let out;\n        switch (k_id) {\n            case 0:\n                return (4 * x * (1 - x)) ** k_q;\n            case 1:\n                out = k_q - 1 / (x * (1 - x));\n                return Math.exp(k_q * out);\n            case 2:\n                return x >= k_q && x <= 1 - k_q ? 1 : 0;\n            case 3:\n                return (x >= k_q && x <= 1 - k_q ? 1 : 0) + (x < k_q) * 0.5;\n            case 4:\n                out = ((x - k_q) / (0.3 * k_q)) ** 2;\n                return Math.exp(-out / 2);\n        }\n    }\n\n    ///////////////////////////\n    // Math\n    ///////////////////////////\n    function Bound(x, min, max) {\n        let v = Math.round(x * PRECISION) / PRECISION;\n        return v < min ? min : v > max ? max : v;\n    }\n    function Mod(x, n) {\n        return ((x % n) + n) % n;\n    }\n    function Random() {\n        return genrand_real2();\n    }\n    function RandomInt(min, max) {\n        return Math.floor(Random() * (max + 1 - min) + min);\n    }\n\n    ///////////////////////////\n    // Utils\n    ///////////////////////////\n    function ord(letter) {\n        return letter.charCodeAt(0);\n    }\n\n    function chr(code) {\n        return String.fromCharCode(code);\n    }\n\n    function getCells() {\n        return {real: cells, imag: cellsIm};\n    }\n\n    function getKernel() {\n        return {real: kernelRe, imag: kernelIm};\n    }\n\n    function ClearCells(buffer, x) {\n        for (let i = 0; i < WORLD_SIZE; i++) {\n            for (let j = 0; j < WORLD_SIZE; j++) {\n                buffer[BUFFER_CELLS_OUT_IDX * BUFFER_SIZE + i * WORLD_SIZE + j] = x;\n            }\n        }\n    }\n\n    function onClick(e) {\n        let rect = e.target.getBoundingClientRect();\n        INIT_CELLS_X = (e.clientX - rect.left) / CANVAS_SCALING; //x position within the element.\n        INIT_CELLS_Y = (e.clientY - rect.top) / CANVAS_SCALING;  //y position within the element.\n        ADD_LENIA = true;\n    }\n\n    ///////////////////////////\n    // Colors\n    ///////////////////////////\n    function hex_to_palette_rgba(hex_bg_color, hex_colors) {\n        const steps = Math.floor(254 / (hex_colors.length - 1));\n        let palette_rgb_uint8 = [];\n        for (let i = 0; i < hex_colors.length - 1; i++) {\n            const rgb1_uint8 = hex_to_rgba_uint8(hex_colors[i]).slice(0, 3);\n            const rgb2_uint8 = hex_to_rgba_uint8(hex_colors[i + 1]).slice(0, 3);\n\n            const colors_list = perceptualSteps(rgb1_uint8, rgb2_uint8, steps);\n            palette_rgb_uint8 = palette_rgb_uint8.concat(colors_list);\n        }\n        let bg_rgba_uint8;\n        if (hex_bg_color === \"\") {\n            bg_rgba_uint8 = [0, 0, 0, 0];\n        } else {\n            bg_rgba_uint8 = hex_to_rgba_uint8(hex_bg_color);\n        }\n        const bg_rgb_uint8 = bg_rgba_uint8.splice(0, 3);\n        palette_rgb_uint8.unshift(bg_rgb_uint8);\n\n        return palette_rgb_uint8;\n    }\n\n    function hex_to_rgba_uint8(hex) {\n        hex = hex.replace(\"#\", \"\");\n\n        rgbaList = [];\n        [0, 2, 4].forEach((i) => {\n            const hexColor = hex.substring(i, i + 2);\n            rgbaList.push(parseInt(hexColor, 16));\n        });\n        rgbaList.push(255);\n\n        return rgbaList;\n    }\n\n    function perceptualSteps(color1, color2, steps) {\n        const gamma = 0.43;\n\n        const rgbFloat1 = fromSRGB(color1);\n        const bright1 = bright(rgbFloat1, gamma);\n        const rgbFloat2 = fromSRGB(color2);\n        const bright2 = bright(rgbFloat2, gamma);\n\n        const colors = [];\n        for (let step = 0; step < steps; step++) {\n            const intensity =\n                lerp(bright1, bright2, step / steps) ** (1 / gamma);\n            let color = lerp(rgbFloat1, rgbFloat2, step / steps);\n\n            let colorSum = 0;\n            for (let i = 0; i < color.length; i++) {\n                colorSum += color[i];\n            }\n            if (colorSum !== 0) {\n                const tmpColor = [];\n                for (let i = 0; i < color.length; i++) {\n                    const c = color[i];\n                    tmpColor.push((c * intensity) / colorSum);\n                }\n                color = tmpColor;\n            }\n            color = toSRGB(color);\n            colors.push(color);\n        }\n\n        return colors;\n    }\n\n    function lerp(colors1, colors2, frac) {\n        if (colors1 instanceof Array) {\n            const colors = [];\n            for (let i = 0; i < colors1.length; i++) {\n                const color1 = colors1[i];\n                const color2 = colors2[i];\n                colors.push(color1 * (1 - frac) + color2 * frac);\n            }\n            return colors;\n        } else {\n            return colors1 * (1 - frac) + colors2 * frac;\n        }\n    }\n\n    function fromSRGB(rgbUINT8) {\n        const rgbFloat = [];\n        for (let i = 0; i < rgbUINT8.length; i++) {\n            const x = rgbUINT8[i];\n            const x_f = x / 255.0;\n            let y;\n            if (x_f <= 0.04045) {\n                y = x_f / 12.92;\n            } else {\n                y = ((x_f + 0.055) / 1.055) ** 2.4;\n            }\n\n            rgbFloat.push(y);\n        }\n\n        return rgbFloat;\n    }\n\n    function toSRGBFloat(x) {\n        if (x <= 0.0031308) {\n            x = 12.92 * x;\n        } else {\n            x = 1.055 * x ** (1 / 2.4) - 0.055;\n        }\n        return x;\n    }\n\n    function toSRGB(rgb) {\n        const rgbUINT8 = [];\n        for (let i = 0; i < rgb.length; i++) {\n            const c = rgb[i];\n            rgbUINT8.push(parseInt(255.9999 * toSRGBFloat(c), 10));\n        }\n        return rgbUINT8;\n    }\n\n    function bright(rgbFloat, gamma) {\n        let sum = 0;\n        for (let i = 0; i < rgbFloat.length; i++) {\n            sum += rgbFloat[i];\n        }\n\n        return sum ** gamma;\n    }\n\n    ///////////////////////////\n    // Setting public functions\n    ///////////////////////////\n    window.leniaEngine = {\n        init,\n        getCells,\n    };\n})();\n","import React, { useRef, useEffect } from \"react\"\nimport styled from \"styled-components\"\nconst axios = require('axios');\nif (typeof window !== 'undefined') {\n    require('../engine')\n}\n\n// const wasmModule = require('../../build/optimized.wasm')\n\nconst StyledDiv = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n`\n\nconst Generator = ({ zoom, fps, scale, lenia_id }) => {\n    const nodeRef = useRef(null);\n\n    useEffect(async () => {\n        const response = await axios.get(`/metadata/${lenia_id}.json`);\n        let leniaMetadata = response.data\n\n        leniaMetadata[\"config\"][\"world_params\"][\"scale\"] = scale\n\n        window.leniaEngine.init(leniaMetadata, zoom, fps);\n    })\n    \n    return (\n        <StyledDiv ref={nodeRef}>\n            <canvas id=\"RENDERING_CANVAS\"></canvas>\n        </StyledDiv>\n    )\n}\n\nexport default Generator","import React from \"react\"\nimport { useQueryParam, NumberParam } from \"use-query-params\";\n\nimport Generator from \"../components/generator\"\n\nconst GeneratorPage = () => {\n    const [id] = useQueryParam(\"id\", NumberParam);\n    const [scale] = useQueryParam(\"scale\", NumberParam);\n    const [fps] = useQueryParam(\"fps\", NumberParam);\n    const [zoom] = useQueryParam(\"zoom\", NumberParam);\n\n    return (\n        <Generator zoom={zoom || 1} fps={fps || 26} scale={scale || 2} lenia_id={id || 0} />\n    )\n}\n\nexport default GeneratorPage"],"names":["INIT_CELLS","SCALE","ZOOM","exportsUpdateFn","NB_CHARS","ord","PRECISION","π","Math","PI","R","T","gf_id","gf_m","gf_s","ADD_LENIA","INIT_CELLS_X","INIT_CELLS_Y","cells","cellsIm","kernelRe","CANVAS_CELLS","RENDERING_CANVAS","WORLD_SIZE","BUFFER_SIZE","PIXEL","CANVAS_SIZE","COLORS","alizarin","hex_to_palette_rgba","cinnamon","city","golden","laurel","msdos","rainbow","salvia","summer","colorName","crop","buffer","bounds","y","x","min","xm","max","ym","console","log","subarray","Float32Array","shape","i","arr","push","ch2val","c","assert","length","first_char_idx","second_char_idx","first_char","second_char","createDataArray","world_size","Array","fill","InitCanvas","id","canvas_size","canvas","document","createElement","getElementById","width","height","ctx","getContext","img","createImageData","rect","getBoundingClientRect","can","left","top","copyInitCells","newCells","x1","y1","scale","angle","h","w","sin","cos","fh","abs","fw","fi","fj","round","j","Mod","setKernel","fft2dFn","kernels_params","bs","k_id","k_q","k_r","tmp_bs","tmp_bs_arr","split","index","parseInt","parseFloat","weight","world_size_center","ii","jj","v","kernelShell","sqrt","rowIdx","set","dist","nb_b","b_dist","b_threshold","floor","out","exp","kernelFn","Bound","n","letter","charCodeAt","onClick","e","target","clientX","clientY","hex_bg_color","hex_colors","steps","palette_rgb_uint8","colors_list","perceptualSteps","hex_to_rgba_uint8","slice","concat","bg_rgb_uint8","splice","unshift","hex","replace","rgbaList","forEach","hexColor","substring","color1","color2","gamma","rgbFloat1","fromSRGB","bright1","bright","rgbFloat2","bright2","colors","step","intensity","lerp","color","colorSum","tmpColor","toSRGB","colors1","colors2","frac","rgbUINT8","rgbFloat","x_f","rgb","sum","window","leniaEngine","init","metadata","zoom","fps","size_power2","zoom_power2","cellsOld","potentialRe","potentialIm","resizeAll","nb_buffers","nb_pages","memory","WebAssembly","Memory","initial","wasmConfig","env","engine","GF_ID","GF_M","GF_S","instantiateStreaming","fetch","then","instance","exports","updateFn","config","attributes","leniax_world_params","attribute","trim","toLocaleLowerCase","setParameters","initCells","string_cells","string_array","max_val","raw_shape","cells_shape","cells_val_l","val_f","flat_data","nb_channels","nb_rows","nb_cols","channel","row","k","createArray","decompressArray","initDone","currentScale","FFT2D","nbStepsForStabilization","copyWithin","initWithProgressiveScaling","loop","setTimeout","update","requestAnimationFrame","rgba","nb_colors","buf","data","p","putImageData","drawImage","DrawArray","render","body","addEventListener","keyCode","ClearCells","setListener","catch","error","getCells","real","imag","axios","require","StyledDiv","styled","lenia_id","nodeRef","useRef","useEffect","get","response","leniaMetadata","ref","useQueryParam","NumberParam"],"sourceRoot":""}